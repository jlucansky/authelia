{"version":3,"sources":["components/PushNotificationIcon.module.css","utils/Configuration.ts","utils/BasePath.ts","utils/AssetPath.ts","hooks/NotificationsContext.ts","components/ColoredSnackbarContent.tsx","components/NotificationBar.tsx","Routes.ts","themes/Light.ts","themes/Dark.ts","themes/Grey.ts","assets/images/applestore-badge.svg","assets/images/googleplay-badge.svg","components/AppStoreBadges.tsx","constants.ts","assets/images/user.svg","layouts/LoginLayout.tsx","services/Api.ts","services/Client.ts","services/RegisterDevice.ts","utils/IdentityToken.ts","views/DeviceRegistration/RegisterOneTimePassword.tsx","components/FingerTouchIcon.tsx","views/DeviceRegistration/RegisterSecurityKey.tsx","services/Consent.ts","hooks/RemoteCall.ts","hooks/Redirector.ts","views/LoadingPage/LoadingPage.tsx","views/LoginPortal/ConsentView/ConsentView.tsx","models/Methods.ts","services/State.ts","hooks/Consent.ts","services/UserPreferences.ts","services/Configuration.ts","hooks/RedirectionURL.ts","hooks/RequestMethod.ts","components/SuccessIcon.tsx","views/LoginPortal/Authenticated.tsx","views/LoginPortal/AuthenticatedView/AuthenticatedView.tsx","components/FixedTextField.tsx","services/FirstFactor.ts","views/LoginPortal/FirstFactor/FirstFactorForm.tsx","components/PushNotificationIcon.tsx","hooks/IntermittentClass.ts","components/PieChartIcon.tsx","components/TimerIcon.tsx","views/LoginPortal/SecondFactor/MethodSelectionDialog.tsx","services/OneTimePassword.ts","components/InformationIcon.tsx","views/LoginPortal/SecondFactor/MethodContainer.tsx","views/LoginPortal/SecondFactor/OneTimePasswordMethod.tsx","views/LoginPortal/SecondFactor/IconWithContext.tsx","views/LoginPortal/SecondFactor/OTPDial.tsx","views/LoginPortal/SecondFactor/PushNotificationMethod.tsx","components/FailureIcon.tsx","hooks/Mounted.ts","services/PushNotification.ts","views/LoginPortal/SecondFactor/SecurityKeyMethod.tsx","components/LinearProgressBar.tsx","services/SecurityKey.ts","hooks/Timer.ts","views/LoginPortal/SecondFactor/SecondFactorForm.tsx","views/LoginPortal/LoginPortal.tsx","hooks/State.ts","hooks/UserInfo.ts","hooks/Configuration.ts","services/SignOut.ts","views/LoginPortal/SignOut/SignOut.tsx","services/ResetPassword.ts","views/ResetPassword/ResetPasswordStep1.tsx","views/ResetPassword/ResetPasswordStep2.tsx","App.tsx","serviceWorker.ts","index.tsx","components/FingerTouchIcon.module.css"],"names":["module","exports","getEmbeddedVariable","variableName","value","document","body","getAttribute","Error","getBasePath","__webpack_public_path__","defaultOptions","NotificationsContext","createContext","notification","setNotification","useNotifications","useNotificationsProps","useContext","notificationBuilder","level","message","timeout","createInfoNotification","useCallback","createSuccessNotification","createWarnNotification","createErrorNotification","isActive","resetNotification","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","ColoredSnackbarContent","props","classes","useStyles","Icon","className","variant","others","SnackbarContent","classnames","icon","iconVariant","makeStyles","theme","backgroundColor","green","palette","dark","primary","main","amber","fontSize","opacity","marginRight","spacing","display","alignItems","NotificationBar","useState","tmpNotification","setTmpNotification","useEffect","shouldSnackbarBeOpen","undefined","Snackbar","open","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","onExited","FirstFactorRoute","AuthenticatedRoute","SecondFactorRoute","SecondFactorU2FRoute","SecondFactorTOTPRoute","SecondFactorPushRoute","ResetPasswordStep1Route","LogoutRoute","Light","createMuiTheme","custom","loadingBar","background","default","paper","Dark","type","Grey","overrides","MuiCssBaseline","color","MuiOutlinedInput","root","borderColor","borderWidth","notchedOutline","MuiCheckbox","MuiInputBase","input","MuiInputLabel","AppStoreBadges","target","targetBlank","width","iconSize","Link","href","googlePlayLink","src","GooglePlay","alt","style","appleStoreLink","AppleStore","GoogleAuthenticator","_extends","Object","assign","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","SvgUser","_ref","svgRef","title","titleId","id","xmlns","xmlnsXlink","x","y","viewBox","enableBackground","xmlSpace","ref","ForwardRef","LoginLayout","Grid","container","justify","Container","maxWidth","rootContainer","item","xs","Typography","children","showBrand","poweredBy","minHeight","textAlign","paddingLeft","paddingRight","margin","fill","marginTop","paddingTop","paddingBottom","grey","basePath","ConsentPath","FirstFactorPath","InitiateTOTPRegistrationPath","CompleteTOTPRegistrationPath","InitiateU2FRegistrationPath","CompleteU2FRegistrationStep1Path","CompleteU2FRegistrationStep2Path","InitiateU2FSignInPath","CompleteU2FSignInPath","CompletePushNotificationSignInPath","CompleteTOTPSignInPath","InitiateResetPasswordPath","CompleteResetPasswordPath","ResetPasswordPath","LogoutPath","StatePath","UserInfoPath","UserInfo2FAMethodPath","ConfigurationPath","toData","resp","data","hasServiceError","errResp","toErrorResponse","status","errored","PostWithOptionalResponse","path","a","axios","post","res","Post","Get","get","initiateTOTPRegistrationProcess","completeTOTPRegistrationProcess","processToken","token","initiateU2FRegistrationProcess","completeU2FRegistrationProcessStep1","completeU2FRegistrationProcessStep2","response","extractIdentityToken","locationSearch","queryParams","queryString","parse","RegisterOneTimePassword","history","useHistory","location","useLocation","secretURL","setSecretURL","secretBase32","setSecretBase32","hasErrored","setHasErrored","isLoading","setIsLoading","search","completeRegistrationProcess","secret","otpauth_url","base32_secret","console","SecretButton","text","action","IconButton","secretButtons","onClick","navigator","clipboard","writeText","qrcodeFuzzyStyle","fuzzy","googleAuthenticator","googleAuthenticatorText","googleAuthenticatorBadges","qrcodeContainer","qrcode","size","CircularProgress","loader","failureIcon","faTimesCircle","TextField","label","InputProps","readOnly","faKey","faCopy","Button","doneButton","push","disabled","marginBottom","filter","typography","position","top","left","red","FingerTouchIcon","shakingClass","animated","shaking","strong","height","hand","wave","RegisterSecurityKey","setRegistrationInProgress","handleBackClick","registerStep1","registerRequests","r","appId","challenge","version","u2fApi","register","registerResponse","instruction","getRequestedScopes","useRemoteCall","fn","deps","setData","inProgress","setInProgress","setError","fnCallback","useRedirector","url","window","LoadingPage","useTheme","showListItemAvatar","AccountBox","Contacts","Group","Drafts","CheckBox","SecondFactorMethod","AuthenticationLevel","justifyContent","scopesListContainer","scopesList","clientID","fontWeight","button","marginLeft","bulletIcon","permissionsContainer","border","listItem","ConsentView","redirect","fetch","err","replace","handleAcceptConsent","client_id","accept_or_reject","redirect_uri","handleRejectConsent","ComponentOrLoading","ready","client_description","List","scopes","map","s","Tooltip","name","ListItem","dense","ListItemIcon","ListItemText","description","toEnum","method","U2F","TOTP","MobilePush","toString","getUserPreferences","setPreferred2FAMethod","getConfiguration","config","available_methods","Set","useRedirectionURL","useRequestMethod","getState","SuccessIcon","faCheckCircle","Authenticated","iconContainer","flex","AuthenticatedView","SignOutRoute","mainContainer","borderRadius","padding","FixedTextField","InputLabelProps","inputProps","autoCapitalize","postFirstFactor","username","password","rememberMe","targetURL","requestMethod","keepMeLoggedIn","FirstFactorForm","redirectionURL","setRememberMe","setUsername","usernameError","setUsernameError","setPassword","passwordError","setPasswordError","usernameRef","useRef","passwordRef","setTimeout","current","focus","clearTimeout","handleSignIn","onAuthenticationStart","onAuthenticationSuccess","onAuthenticationFailure","inputRef","required","fullWidth","onChange","v","onFocus","onKeyPress","ev","preventDefault","resetPassword","leftAlign","actionRow","flexEnd","FormControlLabel","control","Checkbox","checked","component","resetLink","flexDirection","cursor","flexGrow","rightAlign","verticalAlign","PushNotificationIcon","wiggleClass","classname","activeMilliseconds","inactiveMillisecond","startMillisecond","currentClass","setCurrentClass","firstTime","setFirstTime","useIntermittentClass","wiggle","PieChartIcon","maxProgress","cx","cy","stroke","strokeWidth","strokeDasharray","progress","transform","TimerIcon","radius","timeProgress","setTimeProgress","initialValue","Date","getTime","period","interval","setInterval","clearInterval","MethodSelectionDialog","pieChartIcon","Dialog","DialogContent","methods","has","MethodItem","u2fSupported","DialogActions","buttonRoot","completeTOTPSignIn","passcode","State","InformationIcon","faInfoCircle","DefaultMethodContainer","registerMessage","registered","stateClass","state","ALREADY_AUTHENTICATED","NOT_REGISTERED","NotRegisteredContainer","METHOD","explanation","containerFlex","onRegisterClick","flexWrap","alignContent","MethodContainer","IconWithContext","context","OTPDial","dial","otpInput","shouldAutoFocus","numInputs","isDisabled","InProgress","Success","isInputNum","Failure","inputStyle","otpDigitInput","inputError","boxSizing","OneTimePasswordMethod","setPasscode","authenticationLevel","TwoFactor","Idle","setState","onSignInSuccess","onSignInError","onSignInErrorCallback","onSignInSuccessCallback","signInFunc","passcodeStr","methodState","MethodContainerState","totp_period","FailureIcon","useIsMountedRef","isMountedRef","completePushNotificationSignIn","PushNotificationMethod","SignInInProgress","mounted","LinearProgressBar","progressRoot","transition","LinearProgress","bar1Determinate","initiateU2FSignin","completeU2FSignin","signResponse","SecurityKeyMethod","WaitTouch","timeoutMs","startDate","setStartDate","percent","setPercent","trigger","clear","intervalNode","p","useTimer","signInTimeout","timerPercent","triggerTimer","doInitiateSignIn","signRequest","signRequests","registeredKeys","keyHandle","sign","SigninInProgress","timer","onRetryClick","progressBarStyle","touch","failure","SecondFactorForm","methodSelectionOpen","setMethodSelectionOpen","registrationInProgress","setU2fSupported","ensureSupport","then","initiateRegistration","initiateRegistrationFunc","handleMethodSelected","onMethodChanged","userInfo","display_name","configuration","methodContainer","exact","has_totp","has_u2f","to","LoginPortal","firstFactorDisabled","setFirstFactorDisabled","redirector","fetchState","fetchStateError","fetchUserInfo","fetchUserInfoError","fetchConfiguration","fetchConfigurationError","authentication_level","OneFactor","Unauthenticated","redirectionSuffix","encodeURIComponent","second_factor_enabled","handleAuthSuccess","firstFactorReady","pathname","signOut","SignOut","timedOut","setTimedOut","safeRedirect","setSafeRedirect","doSignOut","safeTargetURL","typo","initiateResetPasswordProcess","completeResetPasswordProcess","newPassword","ResetPasswordStep1","doInitiateResetPasswordProcess","e","ResetPasswordStep2","formDisabled","setFormDisabled","password1","setPassword1","password2","setPassword2","errorPassword1","setErrorPassword1","errorPassword2","setErrorPassword2","completeProcess","doResetPassword","includes","Theme","themes","faConfig","autoAddCss","App","ThemeProvider","CssBaseline","Provider","basename","Boolean","hostname","match","ReactDOM","render","getElementById","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.6776a0e9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wiggle\":\"PushNotificationIcon_wiggle__kPe3e\"};","export function getEmbeddedVariable(variableName: string) {\n    const value = document.body.getAttribute(`data-${variableName}`);\n    if (value === null) {\n        throw new Error(`No ${variableName} embedded variable detected`);\n    }\n\n    return value;\n}\n\nexport function getRememberMe() {\n    return getEmbeddedVariable(\"rememberme\") === \"true\";\n}\n\nexport function getResetPassword() {\n    return getEmbeddedVariable(\"resetpassword\") === \"true\";\n}\n\nexport function getTheme() {\n    return getEmbeddedVariable(\"theme\");\n}\n","import { getEmbeddedVariable } from \"./Configuration\";\n\nexport function getBasePath() {\n    return getEmbeddedVariable(\"basepath\");\n}\n","import { getBasePath } from \"./BasePath\";\n\n__webpack_public_path__ = \"/\";\n\nif (getBasePath() !== \"\") {\n    __webpack_public_path__ = getBasePath() + \"/\";\n}\n","import { useCallback, createContext, useContext } from \"react\";\n\nimport { Level } from \"../components/ColoredSnackbarContent\";\nimport { Notification } from \"../models/Notifications\";\n\nconst defaultOptions = {\n    timeout: 5,\n};\n\ninterface NotificationContextProps {\n    notification: Notification | null;\n    setNotification: (n: Notification | null) => void;\n}\n\nconst NotificationsContext = createContext<NotificationContextProps>({ notification: null, setNotification: () => {} });\n\nexport default NotificationsContext;\n\nexport function useNotifications() {\n    let useNotificationsProps = useContext(NotificationsContext);\n\n    const notificationBuilder = (level: Level) => {\n        return (message: string, timeout?: number) => {\n            useNotificationsProps.setNotification({\n                level,\n                message,\n                timeout: timeout ? timeout : defaultOptions.timeout,\n            });\n        };\n    };\n\n    const resetNotification = () => useNotificationsProps.setNotification(null);\n    /* eslint-disable react-hooks/exhaustive-deps */\n    const createInfoNotification = useCallback(notificationBuilder(\"info\"), []);\n    const createSuccessNotification = useCallback(notificationBuilder(\"success\"), []);\n    const createWarnNotification = useCallback(notificationBuilder(\"warning\"), []);\n    const createErrorNotification = useCallback(notificationBuilder(\"error\"), []);\n    /* eslint-enable react-hooks/exhaustive-deps */\n    const isActive = useNotificationsProps.notification !== null;\n\n    return {\n        notification: useNotificationsProps.notification,\n        resetNotification,\n        createInfoNotification,\n        createSuccessNotification,\n        createWarnNotification,\n        createErrorNotification,\n        isActive,\n    };\n}\n","import React from \"react\";\n\nimport { makeStyles, SnackbarContent } from \"@material-ui/core\";\nimport { amber, green } from \"@material-ui/core/colors\";\nimport { SnackbarContentProps } from \"@material-ui/core/SnackbarContent\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport classnames from \"classnames\";\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nexport type Level = keyof typeof variantIcon;\n\nexport interface Props extends SnackbarContentProps {\n    className?: string;\n    level: Level;\n    message: string;\n}\n\nconst ColoredSnackbarContent = function (props: Props) {\n    const classes = useStyles();\n    const Icon = variantIcon[props.level];\n\n    const { className, variant, message, ...others } = props;\n\n    return (\n        <SnackbarContent\n            className={classnames(classes[props.level], className)}\n            message={\n                <span className={classes.message}>\n                    <Icon className={classnames(classes.icon, classes.iconVariant)} />\n                    {message}\n                </span>\n            }\n            {...others}\n        />\n    );\n};\n\nexport default ColoredSnackbarContent;\n\nconst useStyles = makeStyles((theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.main,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: \"flex\",\n        alignItems: \"center\",\n    },\n}));\n","import React, { useState, useEffect } from \"react\";\n\nimport { Snackbar } from \"@material-ui/core\";\n\nimport { useNotifications } from \"../hooks/NotificationsContext\";\nimport { Notification } from \"../models/Notifications\";\nimport ColoredSnackbarContent from \"./ColoredSnackbarContent\";\n\nexport interface Props {\n    onClose: () => void;\n}\n\nconst NotificationBar = function (props: Props) {\n    const [tmpNotification, setTmpNotification] = useState(null as Notification | null);\n    const { notification } = useNotifications();\n\n    useEffect(() => {\n        if (notification && notification !== null) {\n            setTmpNotification(notification);\n        }\n    }, [notification, setTmpNotification]);\n\n    const shouldSnackbarBeOpen = notification !== undefined && notification !== null;\n\n    return (\n        <Snackbar\n            open={shouldSnackbarBeOpen}\n            anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\n            autoHideDuration={tmpNotification ? tmpNotification.timeout * 1000 : 10000}\n            onClose={props.onClose}\n            onExited={() => setTmpNotification(null)}\n        >\n            <ColoredSnackbarContent\n                className=\"notification\"\n                level={tmpNotification ? tmpNotification.level : \"info\"}\n                message={tmpNotification ? tmpNotification.message : \"\"}\n            />\n        </Snackbar>\n    );\n};\n\nexport default NotificationBar;\n","export const FirstFactorRoute: string = \"/\";\nexport const AuthenticatedRoute: string = \"/authenticated\";\nexport const ConsentRoute: string = \"/consent\";\n\nexport const SecondFactorRoute: string = \"/2fa\";\nexport const SecondFactorU2FRoute: string = \"/2fa/security-key\";\nexport const SecondFactorTOTPRoute: string = \"/2fa/one-time-password\";\nexport const SecondFactorPushRoute: string = \"/2fa/push-notification\";\n\nexport const ResetPasswordStep1Route: string = \"/reset-password/step1\";\nexport const ResetPasswordStep2Route: string = \"/reset-password/step2\";\nexport const RegisterSecurityKeyRoute: string = \"/security-key/register\";\nexport const RegisterOneTimePasswordRoute: string = \"/one-time-password/register\";\nexport const LogoutRoute: string = \"/logout\";\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst Light = createMuiTheme({\n    custom: {\n        icon: \"#000\",\n        loadingBar: \"#000\",\n    },\n    palette: {\n        primary: {\n            main: \"#1976d2\",\n        },\n        background: {\n            default: \"#fff\",\n            paper: \"#fff\",\n        },\n    },\n});\n\nexport default Light;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst Dark = createMuiTheme({\n    custom: {\n        icon: \"#fff\",\n        loadingBar: \"#fff\",\n    },\n    palette: {\n        type: \"dark\",\n        primary: {\n            main: \"#1976d2\",\n        },\n    },\n});\n\nexport default Dark;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst Grey = createMuiTheme({\n    custom: {\n        icon: \"#929aa5\",\n        loadingBar: \"#929aa5\",\n    },\n    palette: {\n        primary: {\n            main: \"#929aa5\",\n        },\n        background: {\n            default: \"#2f343e\",\n            paper: \"#2f343e\",\n        },\n    },\n    overrides: {\n        MuiCssBaseline: {\n            \"@global\": {\n                body: {\n                    backgroundColor: \"#2f343e\",\n                    color: \"#929aa5\",\n                },\n            },\n        },\n        MuiOutlinedInput: {\n            root: {\n                \"& $notchedOutline\": {\n                    borderColor: \"#929aa5\",\n                },\n                \"&:hover:not($disabled):not($focused):not($error) $notchedOutline\": {\n                    borderColor: \"#929aa5\",\n                    borderWidth: 2,\n                },\n                \"&$focused $notchedOutline\": {\n                    borderColor: \"#929aa5\",\n                },\n            },\n            notchedOutline: {},\n        },\n        MuiCheckbox: {\n            root: {\n                color: \"#929aa5\",\n            },\n        },\n        MuiInputBase: {\n            input: {\n                color: \"#929aa5\",\n            },\n        },\n        MuiInputLabel: {\n            root: {\n                color: \"#929aa5\",\n            },\n        },\n    },\n});\n\nexport default Grey;\n","export default __webpack_public_path__ + \"static/media/applestore-badge.15f01eef.svg\";","export default __webpack_public_path__ + \"static/media/googleplay-badge.6577102c.svg\";","import React from \"react\";\n\nimport { Link } from \"@material-ui/core\";\n\nimport AppleStore from \"../assets/images/applestore-badge.svg\";\nimport GooglePlay from \"../assets/images/googleplay-badge.svg\";\n\nexport interface Props {\n    iconSize: number;\n    googlePlayLink: string;\n    appleStoreLink: string;\n\n    targetBlank?: boolean;\n    className?: string;\n}\n\nconst AppStoreBadges = function (props: Props) {\n    const target = props.targetBlank ? \"_blank\" : undefined;\n\n    const width = props.iconSize;\n\n    return (\n        <div className={props.className}>\n            <Link href={props.googlePlayLink} target={target}>\n                <img src={GooglePlay} alt=\"google play\" style={{ width }} />\n            </Link>\n            <Link href={props.appleStoreLink} target={target}>\n                <img src={AppleStore} alt=\"apple store\" style={{ width }} />\n            </Link>\n        </div>\n    );\n};\n\nexport default AppStoreBadges;\n","export const GoogleAuthenticator = {\n    googlePlay: \"https://play.google.com/store/apps/details?id=com.google.android.apps.authenticator2&hl=en_us\",\n    appleStore: \"https://apps.apple.com/us/app/google-authenticator/id388497605\",\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M55,27.5C55,12.337,42.663,0,27.5,0S0,12.337,0,27.5c0,8.009,3.444,15.228,8.926,20.258l-0.026,0.023l0.892,0.752 c0.058,0.049,0.121,0.089,0.179,0.137c0.474,0.393,0.965,0.766,1.465,1.127c0.162,0.117,0.324,0.234,0.489,0.348 c0.534,0.368,1.082,0.717,1.642,1.048c0.122,0.072,0.245,0.142,0.368,0.212c0.613,0.349,1.239,0.678,1.88,0.98 c0.047,0.022,0.095,0.042,0.142,0.064c2.089,0.971,4.319,1.684,6.651,2.105c0.061,0.011,0.122,0.022,0.184,0.033 c0.724,0.125,1.456,0.225,2.197,0.292c0.09,0.008,0.18,0.013,0.271,0.021C25.998,54.961,26.744,55,27.5,55 c0.749,0,1.488-0.039,2.222-0.098c0.093-0.008,0.186-0.013,0.279-0.021c0.735-0.067,1.461-0.164,2.178-0.287 c0.062-0.011,0.125-0.022,0.187-0.034c2.297-0.412,4.495-1.109,6.557-2.055c0.076-0.035,0.153-0.068,0.229-0.104 c0.617-0.29,1.22-0.603,1.811-0.936c0.147-0.083,0.293-0.167,0.439-0.253c0.538-0.317,1.067-0.648,1.581-1 c0.185-0.126,0.366-0.259,0.549-0.391c0.439-0.316,0.87-0.642,1.289-0.983c0.093-0.075,0.193-0.14,0.284-0.217l0.915-0.764 l-0.027-0.023C51.523,42.802,55,35.55,55,27.5z M2,27.5C2,13.439,13.439,2,27.5,2S53,13.439,53,27.5 c0,7.577-3.325,14.389-8.589,19.063c-0.294-0.203-0.59-0.385-0.893-0.537l-8.467-4.233c-0.76-0.38-1.232-1.144-1.232-1.993v-2.957 c0.196-0.242,0.403-0.516,0.617-0.817c1.096-1.548,1.975-3.27,2.616-5.123c1.267-0.602,2.085-1.864,2.085-3.289v-3.545 c0-0.867-0.318-1.708-0.887-2.369v-4.667c0.052-0.52,0.236-3.448-1.883-5.864C34.524,9.065,31.541,8,27.5,8 s-7.024,1.065-8.867,3.168c-2.119,2.416-1.935,5.346-1.883,5.864v4.667c-0.568,0.661-0.887,1.502-0.887,2.369v3.545 c0,1.101,0.494,2.128,1.34,2.821c0.81,3.173,2.477,5.575,3.093,6.389v2.894c0,0.816-0.445,1.566-1.162,1.958l-7.907,4.313 c-0.252,0.137-0.502,0.297-0.752,0.476C5.276,41.792,2,35.022,2,27.5z\"\n});\n\nfunction SvgUser(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"UserSvg\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 55 55\",\n    style: {\n      enableBackground: \"new 0 0 55 55\"\n    },\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgUser);\nexport default __webpack_public_path__ + \"static/media/user.8772ccb3.svg\";\nexport { ForwardRef as ReactComponent };","import React, { ReactNode } from \"react\";\n\nimport { Grid, makeStyles, Container, Typography, Link } from \"@material-ui/core\";\nimport { grey } from \"@material-ui/core/colors\";\n\nimport { ReactComponent as UserSvg } from \"../assets/images/user.svg\";\n\nexport interface Props {\n    id?: string;\n    children?: ReactNode;\n    title?: string;\n    showBrand?: boolean;\n}\n\nconst LoginLayout = function (props: Props) {\n    const style = useStyles();\n    return (\n        <Grid id={props.id} className={style.root} container spacing={0} alignItems=\"center\" justify=\"center\">\n            <Container maxWidth=\"xs\" className={style.rootContainer}>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <UserSvg className={style.icon}></UserSvg>\n                    </Grid>\n                    {props.title ? (\n                        <Grid item xs={12}>\n                            <Typography variant=\"h5\" className={style.title}>\n                                {props.title}\n                            </Typography>\n                        </Grid>\n                    ) : null}\n                    <Grid item xs={12} className={style.body}>\n                        {props.children}\n                    </Grid>\n                    {props.showBrand ? (\n                        <Grid item xs={12}>\n                            <Link\n                                href=\"https://github.com/authelia/authelia\"\n                                target=\"_blank\"\n                                className={style.poweredBy}\n                            >\n                                Powered by Authelia\n                            </Link>\n                        </Grid>\n                    ) : null}\n                </Grid>\n            </Container>\n        </Grid>\n    );\n};\n\nexport default LoginLayout;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        minHeight: \"90vh\",\n        textAlign: \"center\",\n    },\n    rootContainer: {\n        paddingLeft: 32,\n        paddingRight: 32,\n    },\n    title: {},\n    icon: {\n        margin: theme.spacing(),\n        width: \"64px\",\n        fill: theme.custom.icon,\n    },\n    body: {\n        marginTop: theme.spacing(),\n        paddingTop: theme.spacing(),\n        paddingBottom: theme.spacing(),\n    },\n    poweredBy: {\n        fontSize: \"0.7em\",\n        color: grey[500],\n    },\n}));\n","import { AxiosResponse } from \"axios\";\n\nimport { getBasePath } from \"../utils/BasePath\";\n\nconst basePath = getBasePath();\n\n// Note: If you change this const you must also do so in the backend at internal/handlers/cost.go.\nexport const ConsentPath = basePath + \"/api/oidc/consent\";\n\nexport const FirstFactorPath = basePath + \"/api/firstfactor\";\nexport const InitiateTOTPRegistrationPath = basePath + \"/api/secondfactor/totp/identity/start\";\nexport const CompleteTOTPRegistrationPath = basePath + \"/api/secondfactor/totp/identity/finish\";\n\nexport const InitiateU2FRegistrationPath = basePath + \"/api/secondfactor/u2f/identity/start\";\nexport const CompleteU2FRegistrationStep1Path = basePath + \"/api/secondfactor/u2f/identity/finish\";\nexport const CompleteU2FRegistrationStep2Path = basePath + \"/api/secondfactor/u2f/register\";\n\nexport const InitiateU2FSignInPath = basePath + \"/api/secondfactor/u2f/sign_request\";\nexport const CompleteU2FSignInPath = basePath + \"/api/secondfactor/u2f/sign\";\n\nexport const CompletePushNotificationSignInPath = basePath + \"/api/secondfactor/duo\";\nexport const CompleteTOTPSignInPath = basePath + \"/api/secondfactor/totp\";\n\nexport const InitiateResetPasswordPath = basePath + \"/api/reset-password/identity/start\";\nexport const CompleteResetPasswordPath = basePath + \"/api/reset-password/identity/finish\";\n// Do the password reset during completion.\nexport const ResetPasswordPath = basePath + \"/api/reset-password\";\n\nexport const LogoutPath = basePath + \"/api/logout\";\nexport const StatePath = basePath + \"/api/state\";\nexport const UserInfoPath = basePath + \"/api/user/info\";\nexport const UserInfo2FAMethodPath = basePath + \"/api/user/info/2fa_method\";\n\nexport const ConfigurationPath = basePath + \"/api/configuration\";\n\nexport interface ErrorResponse {\n    status: \"KO\";\n    message: string;\n}\n\nexport interface Response<T> {\n    status: \"OK\";\n    data: T;\n}\n\nexport type ServiceResponse<T> = Response<T> | ErrorResponse;\n\nfunction toErrorResponse<T>(resp: AxiosResponse<ServiceResponse<T>>): ErrorResponse | undefined {\n    if (resp.data && \"status\" in resp.data && resp.data[\"status\"] === \"KO\") {\n        return resp.data as ErrorResponse;\n    }\n    return undefined;\n}\n\nexport function toData<T>(resp: AxiosResponse<ServiceResponse<T>>): T | undefined {\n    if (resp.data && \"status\" in resp.data && resp.data[\"status\"] === \"OK\") {\n        return resp.data.data as T;\n    }\n    return undefined;\n}\n\nexport function hasServiceError<T>(resp: AxiosResponse<ServiceResponse<T>>) {\n    const errResp = toErrorResponse(resp);\n    if (errResp && errResp.status === \"KO\") {\n        return { errored: true, message: errResp.message };\n    }\n    return { errored: false, message: null };\n}\n","import axios from \"axios\";\n\nimport { ServiceResponse, hasServiceError, toData } from \"./Api\";\n\nexport async function PostWithOptionalResponse<T = undefined>(path: string, body?: any): Promise<T | undefined> {\n    const res = await axios.post<ServiceResponse<T>>(path, body);\n\n    if (res.status !== 200 || hasServiceError(res).errored) {\n        throw new Error(`Failed POST to ${path}. Code: ${res.status}. Message: ${hasServiceError(res).message}`);\n    }\n    return toData<T>(res);\n}\n\nexport async function Post<T>(path: string, body?: any) {\n    const res = await PostWithOptionalResponse<T>(path, body);\n    if (!res) {\n        throw new Error(\"unexpected type of response\");\n    }\n    return res;\n}\n\nexport async function Get<T = undefined>(path: string): Promise<T> {\n    const res = await axios.get<ServiceResponse<T>>(path);\n\n    if (res.status !== 200 || hasServiceError(res).errored) {\n        throw new Error(`Failed GET from ${path}. Code: ${res.status}.`);\n    }\n\n    const d = toData<T>(res);\n    if (!d) {\n        throw new Error(\"unexpected type of response\");\n    }\n    return d;\n}\n","import U2fApi from \"u2f-api\";\n\nimport {\n    InitiateTOTPRegistrationPath,\n    CompleteTOTPRegistrationPath,\n    InitiateU2FRegistrationPath,\n    CompleteU2FRegistrationStep1Path,\n    CompleteU2FRegistrationStep2Path,\n} from \"./Api\";\nimport { Post, PostWithOptionalResponse } from \"./Client\";\n\nexport async function initiateTOTPRegistrationProcess() {\n    await PostWithOptionalResponse(InitiateTOTPRegistrationPath);\n}\n\ninterface CompleteTOTPRegistrationResponse {\n    base32_secret: string;\n    otpauth_url: string;\n}\n\nexport async function completeTOTPRegistrationProcess(processToken: string) {\n    return Post<CompleteTOTPRegistrationResponse>(CompleteTOTPRegistrationPath, { token: processToken });\n}\n\nexport async function initiateU2FRegistrationProcess() {\n    return PostWithOptionalResponse(InitiateU2FRegistrationPath);\n}\n\ninterface U2RRegistrationStep1Response {\n    appId: string;\n    registerRequests: [\n        {\n            version: string;\n            challenge: string;\n        },\n    ];\n}\n\nexport async function completeU2FRegistrationProcessStep1(processToken: string) {\n    return Post<U2RRegistrationStep1Response>(CompleteU2FRegistrationStep1Path, { token: processToken });\n}\n\nexport async function completeU2FRegistrationProcessStep2(response: U2fApi.RegisterResponse) {\n    return PostWithOptionalResponse(CompleteU2FRegistrationStep2Path, response);\n}\n","import queryString from \"query-string\";\n\nexport function extractIdentityToken(locationSearch: string) {\n    const queryParams = queryString.parse(locationSearch);\n    return queryParams && \"token\" in queryParams ? (queryParams[\"token\"] as string) : null;\n}\n","import React, { useEffect, useCallback, useState } from \"react\";\n\nimport { IconDefinition, faCopy, faKey, faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { makeStyles, Typography, Button, IconButton, Link, CircularProgress, TextField } from \"@material-ui/core\";\nimport { red } from \"@material-ui/core/colors\";\nimport classnames from \"classnames\";\nimport QRCode from \"qrcode.react\";\nimport { useHistory, useLocation } from \"react-router\";\n\nimport AppStoreBadges from \"../../components/AppStoreBadges\";\nimport { GoogleAuthenticator } from \"../../constants\";\nimport { useNotifications } from \"../../hooks/NotificationsContext\";\nimport LoginLayout from \"../../layouts/LoginLayout\";\nimport { FirstFactorRoute } from \"../../Routes\";\nimport { completeTOTPRegistrationProcess } from \"../../services/RegisterDevice\";\nimport { extractIdentityToken } from \"../../utils/IdentityToken\";\n\nconst RegisterOneTimePassword = function () {\n    const style = useStyles();\n    const history = useHistory();\n    const location = useLocation();\n\n    // The secret retrieved from the API is all is ok.\n    const [secretURL, setSecretURL] = useState(\"empty\");\n    const [secretBase32, setSecretBase32] = useState(undefined as string | undefined);\n    const { createSuccessNotification, createErrorNotification } = useNotifications();\n    const [hasErrored, setHasErrored] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // Get the token from the query param to give it back to the API when requesting\n    // the secret for OTP.\n    const processToken = extractIdentityToken(location.search);\n\n    const handleDoneClick = () => {\n        history.push(FirstFactorRoute);\n    };\n\n    const completeRegistrationProcess = useCallback(async () => {\n        if (!processToken) {\n            return;\n        }\n\n        setIsLoading(true);\n        try {\n            const secret = await completeTOTPRegistrationProcess(processToken);\n            setSecretURL(secret.otpauth_url);\n            setSecretBase32(secret.base32_secret);\n        } catch (err) {\n            console.error(err);\n            createErrorNotification(\"Failed to generate the code to register your device\", 10000);\n            setHasErrored(true);\n        }\n        setIsLoading(false);\n    }, [processToken, createErrorNotification]);\n\n    useEffect(() => {\n        completeRegistrationProcess();\n    }, [completeRegistrationProcess]);\n    function SecretButton(text: string | undefined, action: string, icon: IconDefinition) {\n        return (\n            <IconButton\n                className={style.secretButtons}\n                color=\"primary\"\n                onClick={() => {\n                    navigator.clipboard.writeText(`${text}`);\n                    createSuccessNotification(`${action}`);\n                }}\n            >\n                <FontAwesomeIcon icon={icon} />\n            </IconButton>\n        );\n    }\n    const qrcodeFuzzyStyle = isLoading || hasErrored ? style.fuzzy : undefined;\n\n    return (\n        <LoginLayout title=\"Scan QR Code\">\n            <div className={style.root}>\n                <div className={style.googleAuthenticator}>\n                    <Typography className={style.googleAuthenticatorText}>Need Google Authenticator?</Typography>\n                    <AppStoreBadges\n                        iconSize={128}\n                        targetBlank\n                        className={style.googleAuthenticatorBadges}\n                        googlePlayLink={GoogleAuthenticator.googlePlay}\n                        appleStoreLink={GoogleAuthenticator.appleStore}\n                    />\n                </div>\n                <div className={style.qrcodeContainer}>\n                    <Link href={secretURL}>\n                        <QRCode value={secretURL} className={classnames(qrcodeFuzzyStyle, style.qrcode)} size={256} />\n                        {!hasErrored && isLoading ? <CircularProgress className={style.loader} size={128} /> : null}\n                        {hasErrored ? <FontAwesomeIcon className={style.failureIcon} icon={faTimesCircle} /> : null}\n                    </Link>\n                </div>\n                <div>\n                    {secretURL !== \"empty\" ? (\n                        <TextField\n                            id=\"secret-url\"\n                            label=\"Secret\"\n                            className={style.secret}\n                            value={secretURL}\n                            InputProps={{\n                                readOnly: true,\n                            }}\n                        />\n                    ) : null}\n                    {secretBase32 ? SecretButton(secretBase32, \"OTP Secret copied to clipboard.\", faKey) : null}\n                    {secretURL !== \"empty\" ? SecretButton(secretURL, \"OTP URL copied to clipboard.\", faCopy) : null}\n                </div>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className={style.doneButton}\n                    onClick={handleDoneClick}\n                    disabled={isLoading}\n                >\n                    Done\n                </Button>\n            </div>\n        </LoginLayout>\n    );\n};\n\nexport default RegisterOneTimePassword;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    qrcode: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    fuzzy: {\n        filter: \"blur(10px)\",\n    },\n    secret: {\n        marginTop: theme.spacing(1),\n        marginBottom: theme.spacing(1),\n        width: \"256px\",\n    },\n    googleAuthenticator: {},\n    googleAuthenticatorText: {\n        fontSize: theme.typography.fontSize * 0.8,\n    },\n    googleAuthenticatorBadges: {},\n    secretButtons: {\n        width: \"128px\",\n    },\n    doneButton: {\n        width: \"256px\",\n    },\n    qrcodeContainer: {\n        position: \"relative\",\n        display: \"inline-block\",\n    },\n    loader: {\n        position: \"absolute\",\n        top: \"calc(128px - 64px)\",\n        left: \"calc(128px - 64px)\",\n        color: \"rgba(255, 255, 255, 0.5)\",\n    },\n    failureIcon: {\n        position: \"absolute\",\n        top: \"calc(128px - 64px)\",\n        left: \"calc(128px - 64px)\",\n        color: red[400],\n        fontSize: \"128px\",\n    },\n}));\n","import React from \"react\";\n\nimport classnames from \"classnames\";\n\nimport style from \"./FingerTouchIcon.module.css\";\n\nexport interface Props {\n    size: number;\n\n    animated?: boolean;\n    strong?: boolean;\n}\n\nconst FingerTouchIcon = function (props: Props) {\n    const shakingClass = props.animated ? style.shaking : undefined;\n    const strong = props.strong ? style.strong : undefined;\n\n    return (\n        <svg\n            x=\"0px\"\n            y=\"0px\"\n            viewBox=\"0 0 500 500\"\n            width={props.size}\n            height={props.size}\n            className={classnames(style.hand, strong)}\n        >\n            <path\n                className={shakingClass}\n                d=\"M438.827,186.347l-80.213-88.149c-15.872-15.872-41.728-15.893-57.749,0.128c-5.077,5.077-8.533,11.157-10.325,17.643\n\t\t\t\tc-15.957-12.224-38.976-11.008-53.675,3.691c-5.056,5.077-8.512,11.157-10.347,17.621c-15.957-12.181-38.976-10.987-53.653,3.712\n\t\t\t\tc-4.971,4.971-8.384,10.901-10.24,17.216l-37.803-37.803c-15.872-15.872-41.728-15.893-57.749,0.128\n\t\t\t\tc-15.893,15.872-15.893,41.728,0,57.621l145.237,145.237l-86.144,13.525c-23.275,3.328-40.832,23.552-40.832,47.083\n\t\t\t\tc0,17.643,14.357,32,32,32h201.152c31.339,0,60.8-12.203,82.965-34.368l33.557-33.557c22.144-22.123,34.325-51.563,34.325-82.859\n\t\t\t\tC469.333,235.989,458.496,207.979,438.827,186.347z M419.925,332.992l-33.557,33.557c-18.133,18.133-42.24,28.117-67.883,28.117\n\t\t\t\tH117.333c-5.888,0-10.667-4.779-10.667-10.667c0-12.971,9.685-24.128,22.677-25.984l106.987-16.811\n\t\t\t\tc3.968-0.619,7.232-3.413,8.491-7.232c1.237-3.797,0.235-8-2.603-10.837L82.155,163.072c-7.573-7.573-7.573-19.904,0.107-27.605\n\t\t\t\tc3.797-3.776,8.768-5.675,13.739-5.675c4.971,0,9.941,1.899,13.739,5.696l106.731,106.731c4.16,4.16,10.923,4.16,15.083,0\n\t\t\t\tc2.069-2.091,3.115-4.821,3.115-7.552s-1.045-5.461-3.136-7.552l-43.584-43.584c-7.573-7.573-7.573-19.883,0.128-27.584\n\t\t\t\tc7.552-7.552,19.904-7.552,27.456,0l43.605,43.605c4.16,4.16,10.923,4.16,15.083,0c2.069-2.091,3.115-4.821,3.115-7.552\n\t\t\t\tc0-2.731-1.045-5.461-3.136-7.552l-22.251-22.251c-7.573-7.573-7.573-19.883,0.128-27.584c7.552-7.552,19.904-7.552,27.456,0\n\t\t\t\tl22.357,22.357c0.043,0.021,0.021,0.021,0.021,0.021l0.021,0.021c0.021,0.021,0.021,0.021,0.021,0.021\n\t\t\t\tc0.021,0.021,0.021,0.021,0.021,0.021h0.021c0.021,0,0.021,0.021,0.021,0.021c4.181,3.968,10.795,3.883,14.869-0.213\n\t\t\t\tc4.16-4.16,4.16-10.923,0-15.083l-0.917-0.917c-3.669-3.669-5.696-8.555-5.696-13.739s2.005-10.048,5.803-13.845\n\t\t\t\tc7.595-7.552,19.883-7.531,27.115-0.363l79.872,87.787C439.125,218.389,448,241.301,448,265.216\n\t\t\t\tC448,290.816,438.037,314.88,419.925,332.992z\"\n            />\n            <path\n                className={style.wave}\n                d=\"M183.381,109.931C167.851,75.563,133.547,53.333,96,53.333c-52.928,0-96,43.072-96,96\n\t\t\t\tc0,37.547,22.229,71.851,56.597,87.403c1.429,0.64,2.923,0.939,4.395,0.939c4.053,0,7.936-2.347,9.728-6.272\n\t\t\t\tc2.411-5.376,0.021-11.691-5.333-14.123c-26.752-12.096-44.053-38.763-44.053-67.947c0-41.173,33.493-74.667,74.667-74.667\n\t\t\t\tc29.184,0,55.851,17.301,67.947,44.053c2.411,5.376,8.747,7.787,14.101,5.333C183.424,121.621,185.813,115.307,183.381,109.931z\"\n            />\n        </svg>\n    );\n};\n\nexport default FingerTouchIcon;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { makeStyles, Typography, Button } from \"@material-ui/core\";\nimport { useHistory, useLocation } from \"react-router\";\nimport u2fApi from \"u2f-api\";\n\nimport FingerTouchIcon from \"../../components/FingerTouchIcon\";\nimport { useNotifications } from \"../../hooks/NotificationsContext\";\nimport LoginLayout from \"../../layouts/LoginLayout\";\nimport { FirstFactorPath } from \"../../services/Api\";\nimport {\n    completeU2FRegistrationProcessStep1,\n    completeU2FRegistrationProcessStep2,\n} from \"../../services/RegisterDevice\";\nimport { extractIdentityToken } from \"../../utils/IdentityToken\";\n\nconst RegisterSecurityKey = function () {\n    const style = useStyles();\n    const history = useHistory();\n    const location = useLocation();\n    const { createErrorNotification } = useNotifications();\n    const [, setRegistrationInProgress] = useState(false);\n\n    const processToken = extractIdentityToken(location.search);\n\n    const handleBackClick = () => {\n        history.push(FirstFactorPath);\n    };\n\n    const registerStep1 = useCallback(async () => {\n        if (!processToken) {\n            return;\n        }\n        try {\n            setRegistrationInProgress(true);\n            const res = await completeU2FRegistrationProcessStep1(processToken);\n            const registerRequests: u2fApi.RegisterRequest[] = [];\n            for (var i in res.registerRequests) {\n                const r = res.registerRequests[i];\n                registerRequests.push({\n                    appId: res.appId,\n                    challenge: r.challenge,\n                    version: r.version,\n                });\n            }\n            const registerResponse = await u2fApi.register(registerRequests, [], 60);\n            await completeU2FRegistrationProcessStep2(registerResponse);\n            setRegistrationInProgress(false);\n            history.push(FirstFactorPath);\n        } catch (err) {\n            console.error(err);\n            createErrorNotification(\n                \"Failed to register your security key. The identity verification process might have timed out.\",\n            );\n        }\n    }, [processToken, createErrorNotification, history]);\n\n    useEffect(() => {\n        registerStep1();\n    }, [registerStep1]);\n\n    return (\n        <LoginLayout title=\"Touch Security Key\">\n            <div className={style.icon}>\n                <FingerTouchIcon size={64} animated />\n            </div>\n            <Typography className={style.instruction}>Touch the token on your security key</Typography>\n            <Button color=\"primary\" onClick={handleBackClick}>\n                Retry\n            </Button>\n            <Button color=\"primary\" onClick={handleBackClick}>\n                Cancel\n            </Button>\n        </LoginLayout>\n    );\n};\n\nexport default RegisterSecurityKey;\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n    },\n    instruction: {\n        paddingBottom: theme.spacing(4),\n    },\n}));\n","import { ConsentPath } from \"./Api\";\nimport { Post, Get } from \"./Client\";\n\ninterface ConsentPostRequestBody {\n    client_id: string;\n    accept_or_reject: \"accept\" | \"reject\";\n}\n\ninterface ConsentPostResponseBody {\n    redirect_uri: string;\n}\n\ninterface ConsentGetResponseBody {\n    client_id: string;\n    client_description: string;\n    scopes: Scope[];\n    audience: Audience[];\n}\n\ninterface Scope {\n    name: string;\n    description: string;\n}\n\ninterface Audience {\n    name: string;\n    description: string;\n}\n\nexport function getRequestedScopes() {\n    return Get<ConsentGetResponseBody>(ConsentPath);\n}\n\nexport function acceptConsent(clientID: string) {\n    const body: ConsentPostRequestBody = { client_id: clientID, accept_or_reject: \"accept\" };\n    return Post<ConsentPostResponseBody>(ConsentPath, body);\n}\n\nexport function rejectConsent(clientID: string) {\n    const body: ConsentPostRequestBody = { client_id: clientID, accept_or_reject: \"reject\" };\n    return Post<ConsentPostResponseBody>(ConsentPath, body);\n}\n","import { useState, useCallback, DependencyList } from \"react\";\n\ntype PromisifiedFunction<Ret> = (...args: any) => Promise<Ret>;\n\nexport function useRemoteCall<Ret>(\n    fn: PromisifiedFunction<Ret>,\n    deps: DependencyList,\n): [Ret | undefined, () => void, boolean, Error | undefined] {\n    const [data, setData] = useState(undefined as Ret | undefined);\n    const [inProgress, setInProgress] = useState(false);\n    const [error, setError] = useState(undefined as Error | undefined);\n\n    const fnCallback = useCallback(fn, [fn, deps]);\n\n    const triggerCallback = useCallback(() => {\n        (async () => {\n            try {\n                setInProgress(true);\n                const res = await fnCallback();\n                setInProgress(false);\n                setData(res);\n            } catch (err) {\n                console.error(err);\n                setError(err);\n            }\n        })();\n    }, [setInProgress, setError, fnCallback]);\n\n    return [data, triggerCallback, inProgress, error];\n}\n","export function useRedirector() {\n    return (url: string) => {\n        window.location.href = url;\n    };\n}\n","import React from \"react\";\n\nimport { useTheme, Typography, Grid } from \"@material-ui/core\";\nimport ReactLoading from \"react-loading\";\n\nconst LoadingPage = function () {\n    const theme = useTheme();\n    return (\n        <Grid container alignItems=\"center\" justify=\"center\" style={{ minHeight: \"100vh\" }}>\n            <Grid item style={{ textAlign: \"center\", display: \"inline-block\" }}>\n                <ReactLoading width={64} height={64} color={theme.custom.loadingBar} type=\"bars\" />\n                <Typography>Loading...</Typography>\n            </Grid>\n        </Grid>\n    );\n};\n\nexport default LoadingPage;\n","import React, { useEffect, Fragment, ReactNode } from \"react\";\n\nimport { Button, Grid, List, ListItem, ListItemIcon, ListItemText, Tooltip, makeStyles } from \"@material-ui/core\";\nimport { AccountBox, CheckBox, Contacts, Drafts, Group } from \"@material-ui/icons\";\nimport { useHistory } from \"react-router-dom\";\n\nimport { useRequestedScopes } from \"../../../hooks/Consent\";\nimport { useNotifications } from \"../../../hooks/NotificationsContext\";\nimport { useRedirector } from \"../../../hooks/Redirector\";\nimport LoginLayout from \"../../../layouts/LoginLayout\";\nimport { acceptConsent, rejectConsent } from \"../../../services/Consent\";\nimport LoadingPage from \"../../LoadingPage/LoadingPage\";\n\nexport interface Props {}\n\nfunction showListItemAvatar(id: string) {\n    switch (id) {\n        case \"openid\":\n            return <AccountBox />;\n        case \"profile\":\n            return <Contacts />;\n        case \"groups\":\n            return <Group />;\n        case \"email\":\n            return <Drafts />;\n        default:\n            return <CheckBox />;\n    }\n}\n\nconst ConsentView = function (props: Props) {\n    const classes = useStyles();\n    const history = useHistory();\n    const redirect = useRedirector();\n    const { createErrorNotification, resetNotification } = useNotifications();\n    const [resp, fetch, , err] = useRequestedScopes();\n\n    useEffect(() => {\n        if (err) {\n            history.replace(\"/\");\n            console.error(`Unable to display consent screen: ${err.message}`);\n        }\n    }, [history, resetNotification, createErrorNotification, err]);\n\n    useEffect(() => {\n        fetch();\n    }, [fetch]);\n\n    const handleAcceptConsent = async () => {\n        // This case should not happen in theory because the buttons are disabled when response is undefined.\n        if (!resp) {\n            return;\n        }\n        const res = await acceptConsent(resp.client_id);\n        if (res.redirect_uri) {\n            redirect(res.redirect_uri);\n        } else {\n            throw new Error(\"Unable to redirect the user\");\n        }\n    };\n\n    const handleRejectConsent = async () => {\n        if (!resp) {\n            return;\n        }\n        const res = await rejectConsent(resp.client_id);\n        if (res.redirect_uri) {\n            redirect(res.redirect_uri);\n        } else {\n            throw new Error(\"Unable to redirect the user\");\n        }\n    };\n\n    return (\n        <ComponentOrLoading ready={resp !== undefined}>\n            <LoginLayout id=\"consent-stage\" title={`Permissions Request`} showBrand>\n                <Grid container>\n                    <Grid item xs={12}>\n                        <div style={{ textAlign: \"left\" }}>\n                            The application\n                            <b>{` ${resp?.client_description} (${resp?.client_id}) `}</b>\n                            is requesting the following permissions\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div className={classes.scopesListContainer}>\n                            <List className={classes.scopesList}>\n                                {resp?.scopes.map((s) => (\n                                    <Tooltip title={\"Scope \" + s.name}>\n                                        <ListItem id={\"scope-\" + s.name} dense>\n                                            <ListItemIcon>{showListItemAvatar(s.name)}</ListItemIcon>\n                                            <ListItemText primary={s.description} />\n                                        </ListItem>\n                                    </Tooltip>\n                                ))}\n                            </List>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Grid container spacing={1}>\n                            <Grid item xs={6}>\n                                <Button\n                                    id=\"accept-button\"\n                                    className={classes.button}\n                                    disabled={!resp}\n                                    onClick={handleAcceptConsent}\n                                    color=\"primary\"\n                                    variant=\"contained\"\n                                >\n                                    Accept\n                                </Button>\n                            </Grid>\n                            <Grid item xs={6}>\n                                <Button\n                                    id=\"deny-button\"\n                                    className={classes.button}\n                                    disabled={!resp}\n                                    onClick={handleRejectConsent}\n                                    color=\"secondary\"\n                                    variant=\"contained\"\n                                >\n                                    Deny\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                </Grid>\n            </LoginLayout>\n        </ComponentOrLoading>\n    );\n};\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        paddingTop: theme.spacing(4),\n        paddingBottom: theme.spacing(4),\n        display: \"block\",\n        justifyContent: \"center\",\n    },\n    scopesListContainer: {\n        textAlign: \"center\",\n    },\n    scopesList: {\n        display: \"inline-block\",\n        backgroundColor: theme.palette.background.paper,\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    clientID: {\n        fontWeight: \"bold\",\n    },\n    button: {\n        marginLeft: theme.spacing(),\n        marginRight: theme.spacing(),\n        width: \"100%\",\n    },\n    bulletIcon: {\n        display: \"inline-block\",\n    },\n    permissionsContainer: {\n        border: \"1px solid #dedede\",\n        margin: theme.spacing(4),\n    },\n    listItem: {\n        textAlign: \"center\",\n        marginRight: theme.spacing(2),\n    },\n}));\n\nexport default ConsentView;\n\ninterface ComponentOrLoadingProps {\n    ready: boolean;\n\n    children: ReactNode;\n}\n\nfunction ComponentOrLoading(props: ComponentOrLoadingProps) {\n    return (\n        <Fragment>\n            <div className={props.ready ? \"hidden\" : \"\"}>\n                <LoadingPage />\n            </div>\n            {props.ready ? props.children : null}\n        </Fragment>\n    );\n}\n","export enum SecondFactorMethod {\n    TOTP = 1,\n    U2F = 2,\n    MobilePush = 3,\n}\n","import { StatePath } from \"./Api\";\nimport { Get } from \"./Client\";\n\nexport enum AuthenticationLevel {\n    Unauthenticated = 0,\n    OneFactor = 1,\n    TwoFactor = 2,\n}\n\nexport interface AutheliaState {\n    username: string;\n    authentication_level: AuthenticationLevel;\n}\n\nexport async function getState(): Promise<AutheliaState> {\n    return Get<AutheliaState>(StatePath);\n}\n","import { getRequestedScopes } from \"../services/Consent\";\nimport { useRemoteCall } from \"./RemoteCall\";\n\nexport function useRequestedScopes() {\n    return useRemoteCall(getRequestedScopes, []);\n}\n","import { SecondFactorMethod } from \"../models/Methods\";\nimport { UserInfo } from \"../models/UserInfo\";\nimport { UserInfoPath, UserInfo2FAMethodPath } from \"./Api\";\nimport { Get, PostWithOptionalResponse } from \"./Client\";\n\nexport type Method2FA = \"u2f\" | \"totp\" | \"mobile_push\";\n\nexport interface UserInfoPayload {\n    display_name: string;\n    method: Method2FA;\n    has_u2f: boolean;\n    has_totp: boolean;\n}\n\nexport interface MethodPreferencePayload {\n    method: Method2FA;\n}\n\nexport function toEnum(method: Method2FA): SecondFactorMethod {\n    switch (method) {\n        case \"u2f\":\n            return SecondFactorMethod.U2F;\n        case \"totp\":\n            return SecondFactorMethod.TOTP;\n        case \"mobile_push\":\n            return SecondFactorMethod.MobilePush;\n    }\n}\n\nexport function toString(method: SecondFactorMethod): Method2FA {\n    switch (method) {\n        case SecondFactorMethod.U2F:\n            return \"u2f\";\n        case SecondFactorMethod.TOTP:\n            return \"totp\";\n        case SecondFactorMethod.MobilePush:\n            return \"mobile_push\";\n    }\n}\n\nexport async function getUserPreferences(): Promise<UserInfo> {\n    const res = await Get<UserInfoPayload>(UserInfoPath);\n    return { ...res, method: toEnum(res.method) };\n}\n\nexport function setPreferred2FAMethod(method: SecondFactorMethod) {\n    return PostWithOptionalResponse(UserInfo2FAMethodPath, { method: toString(method) } as MethodPreferencePayload);\n}\n","import { Configuration } from \"../models/Configuration\";\nimport { ConfigurationPath } from \"./Api\";\nimport { Get } from \"./Client\";\nimport { toEnum, Method2FA } from \"./UserPreferences\";\n\ninterface ConfigurationPayload {\n    available_methods: Method2FA[];\n    second_factor_enabled: boolean;\n    totp_period: number;\n}\n\nexport async function getConfiguration(): Promise<Configuration> {\n    const config = await Get<ConfigurationPayload>(ConfigurationPath);\n    return { ...config, available_methods: new Set(config.available_methods.map(toEnum)) };\n}\n","import queryString from \"query-string\";\nimport { useLocation } from \"react-router\";\n\nexport function useRedirectionURL() {\n    const location = useLocation();\n    const queryParams = queryString.parse(location.search);\n    return queryParams && \"rd\" in queryParams ? (queryParams[\"rd\"] as string) : undefined;\n}\n","import queryString from \"query-string\";\nimport { useLocation } from \"react-router\";\n\nexport function useRequestMethod() {\n    const location = useLocation();\n    const queryParams = queryString.parse(location.search);\n    return queryParams && \"rm\" in queryParams ? (queryParams[\"rm\"] as string) : undefined;\n}\n","import React from \"react\";\n\nimport { faCheckCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst SuccessIcon = function () {\n    return <FontAwesomeIcon icon={faCheckCircle} size=\"4x\" color=\"green\" className=\"success-icon\" />;\n};\n\nexport default SuccessIcon;\n","import React from \"react\";\n\nimport { Typography, makeStyles } from \"@material-ui/core\";\n\nimport SuccessIcon from \"../../components/SuccessIcon\";\n\nconst Authenticated = function () {\n    const classes = useStyles();\n    return (\n        <div id=\"authenticated-stage\">\n            <div className={classes.iconContainer}>\n                <SuccessIcon />\n            </div>\n            <Typography>Authenticated</Typography>\n        </div>\n    );\n};\n\nexport default Authenticated;\n\nconst useStyles = makeStyles((theme) => ({\n    iconContainer: {\n        marginBottom: theme.spacing(2),\n        flex: \"0 0 100%\",\n    },\n}));\n","import React from \"react\";\n\nimport { Grid, makeStyles, Button } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\n\nimport LoginLayout from \"../../../layouts/LoginLayout\";\nimport { LogoutRoute as SignOutRoute } from \"../../../Routes\";\nimport Authenticated from \"../Authenticated\";\n\nexport interface Props {\n    name: string;\n}\n\nconst AuthenticatedView = function (props: Props) {\n    const style = useStyles();\n    const history = useHistory();\n\n    const handleLogoutClick = () => {\n        history.push(SignOutRoute);\n    };\n\n    return (\n        <LoginLayout id=\"authenticated-stage\" title={`Hi ${props.name}`} showBrand>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Button color=\"secondary\" onClick={handleLogoutClick} id=\"logout-button\">\n                        Logout\n                    </Button>\n                </Grid>\n                <Grid item xs={12} className={style.mainContainer}>\n                    <Authenticated />\n                </Grid>\n            </Grid>\n        </LoginLayout>\n    );\n};\n\nexport default AuthenticatedView;\n\nconst useStyles = makeStyles((theme) => ({\n    mainContainer: {\n        border: \"1px solid #d6d6d6\",\n        borderRadius: \"10px\",\n        padding: theme.spacing(4),\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n","import React from \"react\";\n\nimport { makeStyles } from \"@material-ui/core\";\nimport TextField, { TextFieldProps } from \"@material-ui/core/TextField\";\n\n/**\n * This component fixes outlined TextField\n * https://github.com/mui-org/material-ui/issues/14530#issuecomment-463576879\n *\n * @param props the TextField props\n */\nconst FixedTextField = function (props: TextFieldProps) {\n    const style = useStyles();\n    return (\n        <TextField\n            {...props}\n            InputLabelProps={{\n                classes: {\n                    root: style.label,\n                },\n            }}\n            inputProps={{ autoCapitalize: props.autoCapitalize }}\n        >\n            {props.children}\n        </TextField>\n    );\n};\n\nexport default FixedTextField;\n\nconst useStyles = makeStyles((theme) => ({\n    label: {\n        backgroundColor: theme.palette.background.default,\n        paddingLeft: theme.spacing(0.1),\n        paddingRight: theme.spacing(0.1),\n    },\n}));\n","import { FirstFactorPath } from \"./Api\";\nimport { PostWithOptionalResponse } from \"./Client\";\nimport { SignInResponse } from \"./SignIn\";\n\ninterface PostFirstFactorBody {\n    username: string;\n    password: string;\n    keepMeLoggedIn: boolean;\n    targetURL?: string;\n    requestMethod?: string;\n}\n\nexport async function postFirstFactor(\n    username: string,\n    password: string,\n    rememberMe: boolean,\n    targetURL?: string,\n    requestMethod?: string,\n) {\n    const data: PostFirstFactorBody = {\n        username,\n        password,\n        keepMeLoggedIn: rememberMe,\n    };\n\n    if (targetURL) {\n        data.targetURL = targetURL;\n    }\n\n    if (requestMethod) {\n        data.requestMethod = requestMethod;\n    }\n\n    const res = await PostWithOptionalResponse<SignInResponse>(FirstFactorPath, data);\n    return res ? res : ({} as SignInResponse);\n}\n","import React, { MutableRefObject, useEffect, useRef, useState } from \"react\";\n\nimport { makeStyles, Grid, Button, FormControlLabel, Checkbox, Link } from \"@material-ui/core\";\nimport classnames from \"classnames\";\nimport { useHistory } from \"react-router\";\n\nimport FixedTextField from \"../../../components/FixedTextField\";\nimport { useNotifications } from \"../../../hooks/NotificationsContext\";\nimport { useRedirectionURL } from \"../../../hooks/RedirectionURL\";\nimport { useRequestMethod } from \"../../../hooks/RequestMethod\";\nimport LoginLayout from \"../../../layouts/LoginLayout\";\nimport { ResetPasswordStep1Route } from \"../../../Routes\";\nimport { postFirstFactor } from \"../../../services/FirstFactor\";\n\nexport interface Props {\n    disabled: boolean;\n    rememberMe: boolean;\n    resetPassword: boolean;\n\n    onAuthenticationStart: () => void;\n    onAuthenticationFailure: () => void;\n    onAuthenticationSuccess: (redirectURL: string | undefined) => void;\n}\n\nconst FirstFactorForm = function (props: Props) {\n    const style = useStyles();\n    const history = useHistory();\n    const redirectionURL = useRedirectionURL();\n    const requestMethod = useRequestMethod();\n\n    const [rememberMe, setRememberMe] = useState(false);\n    const [username, setUsername] = useState(\"\");\n    const [usernameError, setUsernameError] = useState(false);\n    const [password, setPassword] = useState(\"\");\n    const [passwordError, setPasswordError] = useState(false);\n    const { createErrorNotification } = useNotifications();\n    // TODO (PR: #806, Issue: #511) potentially refactor\n    const usernameRef = useRef() as MutableRefObject<HTMLInputElement>;\n    const passwordRef = useRef() as MutableRefObject<HTMLInputElement>;\n    useEffect(() => {\n        const timeout = setTimeout(() => usernameRef.current.focus(), 10);\n        return () => clearTimeout(timeout);\n    }, [usernameRef]);\n\n    const disabled = props.disabled;\n\n    const handleRememberMeChange = () => {\n        setRememberMe(!rememberMe);\n    };\n\n    const handleSignIn = async () => {\n        if (username === \"\" || password === \"\") {\n            if (username === \"\") {\n                setUsernameError(true);\n            }\n\n            if (password === \"\") {\n                setPasswordError(true);\n            }\n            return;\n        }\n\n        props.onAuthenticationStart();\n        try {\n            const res = await postFirstFactor(username, password, rememberMe, redirectionURL, requestMethod);\n            props.onAuthenticationSuccess(res ? res.redirect : undefined);\n        } catch (err) {\n            console.error(err);\n            createErrorNotification(\"Incorrect username or password.\");\n            props.onAuthenticationFailure();\n            setPassword(\"\");\n            passwordRef.current.focus();\n        }\n    };\n\n    const handleResetPasswordClick = () => {\n        history.push(ResetPasswordStep1Route);\n    };\n\n    return (\n        <LoginLayout id=\"first-factor-stage\" title=\"Sign in\" showBrand>\n            <Grid container spacing={2}>\n                <Grid item xs={12}>\n                    <FixedTextField\n                        // TODO (PR: #806, Issue: #511) potentially refactor\n                        inputRef={usernameRef}\n                        id=\"username-textfield\"\n                        label=\"Username\"\n                        variant=\"outlined\"\n                        required\n                        value={username}\n                        error={usernameError}\n                        disabled={disabled}\n                        fullWidth\n                        onChange={(v) => setUsername(v.target.value)}\n                        onFocus={() => setUsernameError(false)}\n                        autoCapitalize=\"none\"\n                        onKeyPress={(ev) => {\n                            if (ev.key === \"Enter\") {\n                                if (!username.length) {\n                                    setUsernameError(true);\n                                } else if (username.length && password.length) {\n                                    handleSignIn();\n                                } else {\n                                    setUsernameError(false);\n                                    passwordRef.current.focus();\n                                }\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <FixedTextField\n                        // TODO (PR: #806, Issue: #511) potentially refactor\n                        inputRef={passwordRef}\n                        id=\"password-textfield\"\n                        label=\"Password\"\n                        variant=\"outlined\"\n                        required\n                        fullWidth\n                        disabled={disabled}\n                        value={password}\n                        error={passwordError}\n                        onChange={(v) => setPassword(v.target.value)}\n                        onFocus={() => setPasswordError(false)}\n                        type=\"password\"\n                        onKeyPress={(ev) => {\n                            if (ev.key === \"Enter\") {\n                                if (!username.length) {\n                                    usernameRef.current.focus();\n                                } else if (!password.length) {\n                                    passwordRef.current.focus();\n                                }\n                                handleSignIn();\n                                ev.preventDefault();\n                            }\n                        }}\n                    />\n                </Grid>\n                {props.rememberMe || props.resetPassword ? (\n                    <Grid\n                        item\n                        xs={12}\n                        className={\n                            props.rememberMe\n                                ? classnames(style.leftAlign, style.actionRow)\n                                : classnames(style.leftAlign, style.flexEnd, style.actionRow)\n                        }\n                    >\n                        {props.rememberMe ? (\n                            <FormControlLabel\n                                control={\n                                    <Checkbox\n                                        id=\"remember-checkbox\"\n                                        disabled={disabled}\n                                        checked={rememberMe}\n                                        onChange={handleRememberMeChange}\n                                        onKeyPress={(ev) => {\n                                            if (ev.key === \"Enter\") {\n                                                if (!username.length) {\n                                                    usernameRef.current.focus();\n                                                } else if (!password.length) {\n                                                    passwordRef.current.focus();\n                                                }\n                                                handleSignIn();\n                                            }\n                                        }}\n                                        value=\"rememberMe\"\n                                        color=\"primary\"\n                                    />\n                                }\n                                className={style.rememberMe}\n                                label=\"Remember me\"\n                            />\n                        ) : null}\n                        {props.resetPassword ? (\n                            <Link\n                                id=\"reset-password-button\"\n                                component=\"button\"\n                                onClick={handleResetPasswordClick}\n                                className={style.resetLink}\n                            >\n                                Reset password?\n                            </Link>\n                        ) : null}\n                    </Grid>\n                ) : null}\n                <Grid item xs={12}>\n                    <Button\n                        id=\"sign-in-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        disabled={disabled}\n                        onClick={handleSignIn}\n                    >\n                        Sign in\n                    </Button>\n                </Grid>\n            </Grid>\n        </LoginLayout>\n    );\n};\n\nexport default FirstFactorForm;\n\nconst useStyles = makeStyles((theme) => ({\n    actionRow: {\n        display: \"flex\",\n        flexDirection: \"row\",\n        marginTop: theme.spacing(-1),\n        marginBottom: theme.spacing(-1),\n    },\n    resetLink: {\n        cursor: \"pointer\",\n        paddingTop: 13.5,\n        paddingBottom: 13.5,\n    },\n    rememberMe: {\n        flexGrow: 1,\n    },\n    flexEnd: {\n        justifyContent: \"flex-end\",\n    },\n    leftAlign: {\n        textAlign: \"left\",\n    },\n    rightAlign: {\n        textAlign: \"right\",\n        verticalAlign: \"bottom\",\n    },\n}));\n","import React from \"react\";\n\nimport { useIntermittentClass } from \"../hooks/IntermittentClass\";\nimport style from \"./PushNotificationIcon.module.css\";\n\nexport interface Props {\n    width: number;\n    height: number;\n\n    animated?: boolean;\n}\n\nconst PushNotificationIcon = function (props: Props) {\n    const idleMilliseconds = 2500;\n    const wiggleMilliseconds = 500;\n    const startMilliseconds = 500;\n    const wiggleClass = useIntermittentClass(\n        props.animated ? style.wiggle : \"\",\n        wiggleMilliseconds,\n        idleMilliseconds,\n        startMilliseconds,\n    );\n\n    return (\n        <svg x=\"0px\" y=\"0px\" viewBox=\"0 0 60 60\" width={props.width} height={props.height} className={wiggleClass}>\n            <g>\n                <path\n                    className=\"case\"\n                    d=\"M42.595,0H17.405C14.977,0,13,1.977,13,4.405v51.189C13,58.023,14.977,60,17.405,60h25.189C45.023,60,47,58.023,47,55.595\n                    V4.405C47,1.977,45.023,0,42.595,0z M15,8h30v38H15V8z M17.405,2h25.189C43.921,2,45,3.079,45,4.405V6H15V4.405\n                    C15,3.079,16.079,2,17.405,2z M42.595,58H17.405C16.079,58,15,56.921,15,55.595V48h30v7.595C45,56.921,43.921,58,42.595,58z\"\n                />\n                <path\n                    className=\"button\"\n                    d=\"M30,49c-2.206,0-4,1.794-4,4s1.794,4,4,4s4-1.794,4-4S32.206,49,30,49z M30,55c-1.103,0-2-0.897-2-2s0.897-2,2-2\n                    s2,0.897,2,2S31.103,55,30,55z\"\n                />\n                <path\n                    className=\"speaker\"\n                    d=\"M26,5h4c0.553,0,1-0.447,1-1s-0.447-1-1-1h-4c-0.553,0-1,0.447-1,1S25.447,5,26,5z\"\n                />\n                <path\n                    className=\"camera\"\n                    d=\"M33,5h1c0.553,0,1-0.447,1-1s-0.447-1-1-1h-1c-0.553,0-1,0.447-1,1S32.447,5,33,5z\"\n                />\n            </g>\n\n            <path\n                d=\"M56.612,4.569c-0.391-0.391-1.023-0.391-1.414,0s-0.391,1.023,0,1.414c3.736,3.736,3.736,9.815,0,13.552\n                c-0.391,0.391-0.391,1.023,0,1.414c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293\n                C61.128,16.434,61.128,9.085,56.612,4.569z\"\n            />\n            <path\n                d=\"M52.401,6.845c-0.391-0.391-1.023-0.391-1.414,0s-0.391,1.023,0,1.414c1.237,1.237,1.918,2.885,1.918,4.639\n                s-0.681,3.401-1.918,4.638c-0.391,0.391-0.391,1.023,0,1.414c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293\n                c1.615-1.614,2.504-3.764,2.504-6.052S54.017,8.459,52.401,6.845z\"\n            />\n            <path\n                d=\"M4.802,5.983c0.391-0.391,0.391-1.023,0-1.414s-1.023-0.391-1.414,0c-4.516,4.516-4.516,11.864,0,16.38\n                c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293c0.391-0.391,0.391-1.023,0-1.414\n                C1.065,15.799,1.065,9.72,4.802,5.983z\"\n            />\n            <path\n                d=\"M9.013,6.569c-0.391-0.391-1.023-0.391-1.414,0c-1.615,1.614-2.504,3.764-2.504,6.052s0.889,4.438,2.504,6.053\n                c0.195,0.195,0.451,0.293,0.707,0.293s0.512-0.098,0.707-0.293c0.391-0.391,0.391-1.023,0-1.414\n                c-1.237-1.237-1.918-2.885-1.918-4.639S7.775,9.22,9.013,7.983C9.403,7.593,9.403,6.96,9.013,6.569z\"\n            />\n        </svg>\n    );\n};\n\nexport default PushNotificationIcon;\n","import { useState, useEffect } from \"react\";\n\nexport function useIntermittentClass(\n    classname: string,\n    activeMilliseconds: number,\n    inactiveMillisecond: number,\n    startMillisecond?: number,\n) {\n    const [currentClass, setCurrentClass] = useState(\"\");\n    const [firstTime, setFirstTime] = useState(true);\n\n    useEffect(() => {\n        let timeout: NodeJS.Timeout;\n\n        if (firstTime) {\n            if (startMillisecond && startMillisecond > 0) {\n                timeout = setTimeout(() => {\n                    setCurrentClass(classname);\n                    setFirstTime(false);\n                }, startMillisecond);\n            } else {\n                timeout = setTimeout(() => {\n                    setCurrentClass(classname);\n                    setFirstTime(false);\n                }, 0);\n            }\n        } else {\n            if (currentClass === \"\") {\n                timeout = setTimeout(() => setCurrentClass(classname), inactiveMillisecond);\n            } else {\n                timeout = setTimeout(() => setCurrentClass(\"\"), activeMilliseconds);\n            }\n        }\n        return () => clearTimeout(timeout);\n    }, [currentClass, classname, activeMilliseconds, inactiveMillisecond, startMillisecond, firstTime]);\n\n    return currentClass;\n}\n","import React from \"react\";\n\nexport interface Props {\n    maxProgress?: number;\n    progress: number;\n\n    width?: number;\n    height?: number;\n\n    color?: string;\n    backgroundColor?: string;\n}\n\nconst PieChartIcon = function (props: Props) {\n    const maxProgress = props.maxProgress ? props.maxProgress : 100;\n    const width = props.width ? props.width : 20;\n    const height = props.height ? props.height : 20;\n\n    const color = props.color ? props.color : \"black\";\n    const backgroundColor = props.backgroundColor ? props.backgroundColor : \"white\";\n\n    return (\n        <svg height={`${width}`} width={`${height}`} viewBox=\"0 0 26 26\">\n            <circle r=\"12\" cx=\"13\" cy=\"13\" fill=\"none\" stroke={backgroundColor} strokeWidth=\"2\" />\n            <circle r=\"9\" cx=\"13\" cy=\"13\" fill={backgroundColor} stroke=\"transparent\" />\n            <circle\n                r=\"5\"\n                cx=\"13\"\n                cy=\"13\"\n                fill=\"none\"\n                stroke={color}\n                strokeWidth=\"10\"\n                strokeDasharray={`${props.progress} ${maxProgress}`}\n                transform=\"rotate(-90) translate(-26)\"\n            />\n        </svg>\n    );\n};\n\nexport default PieChartIcon;\n","import React, { useState, useEffect } from \"react\";\n\nimport PieChartIcon from \"./PieChartIcon\";\n\nexport interface Props {\n    width: number;\n    height: number;\n    period: number;\n\n    color?: string;\n    backgroundColor?: string;\n}\n\nconst TimerIcon = function (props: Props) {\n    const radius = 31.6;\n    const [timeProgress, setTimeProgress] = useState(0);\n\n    useEffect(() => {\n        // Get the current number of seconds to initialize timer.\n        const initialValue = (((new Date().getTime() / 1000) % props.period) / props.period) * radius;\n        setTimeProgress(initialValue);\n\n        const interval = setInterval(() => {\n            const value = (((new Date().getTime() / 1000) % props.period) / props.period) * radius;\n            setTimeProgress(value);\n        }, 100);\n        return () => clearInterval(interval);\n    }, [props]);\n\n    return (\n        <PieChartIcon\n            width={props.width}\n            height={props.height}\n            progress={timeProgress}\n            maxProgress={radius}\n            backgroundColor={props.backgroundColor}\n            color={props.color}\n        />\n    );\n};\n\nexport default TimerIcon;\n","import React, { ReactNode } from \"react\";\n\nimport {\n    Dialog,\n    Grid,\n    makeStyles,\n    DialogContent,\n    Button,\n    DialogActions,\n    Typography,\n    useTheme,\n} from \"@material-ui/core\";\n\nimport FingerTouchIcon from \"../../../components/FingerTouchIcon\";\nimport PushNotificationIcon from \"../../../components/PushNotificationIcon\";\nimport TimerIcon from \"../../../components/TimerIcon\";\nimport { SecondFactorMethod } from \"../../../models/Methods\";\n\nexport interface Props {\n    open: boolean;\n    methods: Set<SecondFactorMethod>;\n    u2fSupported: boolean;\n\n    onClose: () => void;\n    onClick: (method: SecondFactorMethod) => void;\n}\n\nconst MethodSelectionDialog = function (props: Props) {\n    const style = useStyles();\n    const theme = useTheme();\n\n    const pieChartIcon = (\n        <TimerIcon width={24} height={24} period={15} color={theme.palette.primary.main} backgroundColor={\"white\"} />\n    );\n\n    return (\n        <Dialog open={props.open} className={style.root} onClose={props.onClose}>\n            <DialogContent>\n                <Grid container justify=\"center\" spacing={1} id=\"methods-dialog\">\n                    {props.methods.has(SecondFactorMethod.TOTP) ? (\n                        <MethodItem\n                            id=\"one-time-password-option\"\n                            method=\"Time-based One-Time Password\"\n                            icon={pieChartIcon}\n                            onClick={() => props.onClick(SecondFactorMethod.TOTP)}\n                        />\n                    ) : null}\n                    {props.methods.has(SecondFactorMethod.U2F) && props.u2fSupported ? (\n                        <MethodItem\n                            id=\"security-key-option\"\n                            method=\"Security Key - U2F\"\n                            icon={<FingerTouchIcon size={32} />}\n                            onClick={() => props.onClick(SecondFactorMethod.U2F)}\n                        />\n                    ) : null}\n                    {props.methods.has(SecondFactorMethod.MobilePush) ? (\n                        <MethodItem\n                            id=\"push-notification-option\"\n                            method=\"Push Notification\"\n                            icon={<PushNotificationIcon width={32} height={32} />}\n                            onClick={() => props.onClick(SecondFactorMethod.MobilePush)}\n                        />\n                    ) : null}\n                </Grid>\n            </DialogContent>\n            <DialogActions>\n                <Button color=\"primary\" onClick={props.onClose}>\n                    Close\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n};\n\nexport default MethodSelectionDialog;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        textAlign: \"center\",\n    },\n}));\n\ninterface MethodItemProps {\n    id: string;\n    method: string;\n    icon: ReactNode;\n\n    onClick: () => void;\n}\n\nfunction MethodItem(props: MethodItemProps) {\n    const style = makeStyles((theme) => ({\n        item: {\n            paddingTop: theme.spacing(4),\n            paddingBottom: theme.spacing(4),\n            width: \"100%\",\n        },\n        icon: {\n            display: \"inline-block\",\n            fill: \"white\",\n        },\n        buttonRoot: {\n            display: \"block\",\n        },\n    }))();\n\n    return (\n        <Grid item xs={12} className=\"method-option\" id={props.id}>\n            <Button\n                className={style.item}\n                color=\"primary\"\n                classes={{ root: style.buttonRoot }}\n                variant=\"contained\"\n                onClick={props.onClick}\n            >\n                <div className={style.icon}>{props.icon}</div>\n                <div>\n                    <Typography>{props.method}</Typography>\n                </div>\n            </Button>\n        </Grid>\n    );\n}\n","import { CompleteTOTPSignInPath } from \"./Api\";\nimport { PostWithOptionalResponse } from \"./Client\";\nimport { SignInResponse } from \"./SignIn\";\n\ninterface CompleteU2FSigninBody {\n    token: string;\n    targetURL?: string;\n}\n\nexport function completeTOTPSignIn(passcode: string, targetURL: string | undefined) {\n    const body: CompleteU2FSigninBody = { token: `${passcode}` };\n    if (targetURL) {\n        body.targetURL = targetURL;\n    }\n    return PostWithOptionalResponse<SignInResponse>(CompleteTOTPSignInPath, body);\n}\n","import React from \"react\";\n\nimport { faInfoCircle } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport interface Props {}\n\nconst InformationIcon = function (props: Props) {\n    return <FontAwesomeIcon icon={faInfoCircle} size=\"4x\" color=\"#5858ff\" className=\"information-icon\" />;\n};\n\nexport default InformationIcon;\n","import React, { ReactNode, Fragment } from \"react\";\n\nimport { makeStyles, Typography, Link, useTheme } from \"@material-ui/core\";\nimport classnames from \"classnames\";\n\nimport InformationIcon from \"../../../components/InformationIcon\";\nimport Authenticated from \"../Authenticated\";\n\nexport enum State {\n    ALREADY_AUTHENTICATED = 1,\n    NOT_REGISTERED = 2,\n    METHOD = 3,\n}\n\nexport interface Props {\n    id: string;\n    title: string;\n    registered: boolean;\n    explanation: string;\n    state: State;\n    children: ReactNode;\n\n    onRegisterClick?: () => void;\n}\n\nconst DefaultMethodContainer = function (props: Props) {\n    const style = useStyles();\n    const registerMessage = props.registered ? \"Lost your device?\" : \"Not registered yet?\";\n\n    let container: ReactNode;\n    let stateClass: string = \"\";\n    switch (props.state) {\n        case State.ALREADY_AUTHENTICATED:\n            container = <Authenticated />;\n            stateClass = \"state-already-authenticated\";\n            break;\n        case State.NOT_REGISTERED:\n            container = <NotRegisteredContainer />;\n            stateClass = \"state-not-registered\";\n            break;\n        case State.METHOD:\n            container = <MethodContainer explanation={props.explanation}>{props.children}</MethodContainer>;\n            stateClass = \"state-method\";\n            break;\n    }\n\n    return (\n        <div id={props.id}>\n            <Typography variant=\"h6\">{props.title}</Typography>\n            <div className={classnames(style.container, stateClass)} id=\"2fa-container\">\n                <div className={style.containerFlex}>{container}</div>\n            </div>\n            {props.onRegisterClick ? (\n                <Link component=\"button\" id=\"register-link\" onClick={props.onRegisterClick}>\n                    {registerMessage}\n                </Link>\n            ) : null}\n        </div>\n    );\n};\n\nexport default DefaultMethodContainer;\n\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        height: \"200px\",\n    },\n    containerFlex: {\n        display: \"flex\",\n        flexWrap: \"wrap\",\n        height: \"100%\",\n        width: \"100%\",\n        alignItems: \"center\",\n        alignContent: \"center\",\n        justifyContent: \"center\",\n    },\n}));\n\nfunction NotRegisteredContainer() {\n    const theme = useTheme();\n    return (\n        <Fragment>\n            <div style={{ marginBottom: theme.spacing(2), flex: \"0 0 100%\" }}>\n                <InformationIcon />\n            </div>\n            <Typography style={{ color: \"#5858ff\" }}>\n                Register your first device by clicking on the link below\n            </Typography>\n        </Fragment>\n    );\n}\n\ninterface MethodContainerProps {\n    explanation: string;\n    children: ReactNode;\n}\n\nfunction MethodContainer(props: MethodContainerProps) {\n    const theme = useTheme();\n    return (\n        <Fragment>\n            <div style={{ marginBottom: theme.spacing(2) }}>{props.children}</div>\n            <Typography>{props.explanation}</Typography>\n        </Fragment>\n    );\n}\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport { useRedirectionURL } from \"../../../hooks/RedirectionURL\";\nimport { completeTOTPSignIn } from \"../../../services/OneTimePassword\";\nimport { AuthenticationLevel } from \"../../../services/State\";\nimport MethodContainer, { State as MethodContainerState } from \"./MethodContainer\";\nimport OTPDial from \"./OTPDial\";\n\nexport enum State {\n    Idle = 1,\n    InProgress = 2,\n    Success = 3,\n    Failure = 4,\n}\n\nexport interface Props {\n    id: string;\n    authenticationLevel: AuthenticationLevel;\n    registered: boolean;\n    totp_period: number;\n\n    onRegisterClick: () => void;\n    onSignInError: (err: Error) => void;\n    onSignInSuccess: (redirectURL: string | undefined) => void;\n}\n\nconst OneTimePasswordMethod = function (props: Props) {\n    const [passcode, setPasscode] = useState(\"\");\n    const [state, setState] = useState(\n        props.authenticationLevel === AuthenticationLevel.TwoFactor ? State.Success : State.Idle,\n    );\n    const redirectionURL = useRedirectionURL();\n\n    const { onSignInSuccess, onSignInError } = props;\n    /* eslint-disable react-hooks/exhaustive-deps */\n    const onSignInErrorCallback = useCallback(onSignInError, []);\n    const onSignInSuccessCallback = useCallback(onSignInSuccess, []);\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const signInFunc = useCallback(async () => {\n        if (props.authenticationLevel === AuthenticationLevel.TwoFactor) {\n            return;\n        }\n\n        const passcodeStr = `${passcode}`;\n\n        if (!passcode || passcodeStr.length !== 6) {\n            return;\n        }\n\n        try {\n            setState(State.InProgress);\n            const res = await completeTOTPSignIn(passcodeStr, redirectionURL);\n            setState(State.Success);\n            onSignInSuccessCallback(res ? res.redirect : undefined);\n        } catch (err) {\n            console.error(err);\n            onSignInErrorCallback(new Error(\"The one-time password might be wrong\"));\n            setState(State.Failure);\n        }\n        setPasscode(\"\");\n    }, [passcode, onSignInErrorCallback, onSignInSuccessCallback, redirectionURL, props.authenticationLevel]);\n\n    // Set successful state if user is already authenticated.\n    useEffect(() => {\n        if (props.authenticationLevel >= AuthenticationLevel.TwoFactor) {\n            setState(State.Success);\n        }\n    }, [props.authenticationLevel, setState]);\n\n    useEffect(() => {\n        signInFunc();\n    }, [signInFunc]);\n\n    let methodState = MethodContainerState.METHOD;\n    if (props.authenticationLevel === AuthenticationLevel.TwoFactor) {\n        methodState = MethodContainerState.ALREADY_AUTHENTICATED;\n    } else if (!props.registered) {\n        methodState = MethodContainerState.NOT_REGISTERED;\n    }\n\n    return (\n        <MethodContainer\n            id={props.id}\n            title=\"One-Time Password\"\n            explanation=\"Enter one-time password\"\n            registered={props.registered}\n            state={methodState}\n            onRegisterClick={props.onRegisterClick}\n        >\n            <OTPDial passcode={passcode} onChange={setPasscode} state={state} period={props.totp_period} />\n        </MethodContainer>\n    );\n};\n\nexport default OneTimePasswordMethod;\n","import React, { ReactNode } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core\";\nimport classnames from \"classnames\";\n\ninterface IconWithContextProps {\n    icon: ReactNode;\n    context: ReactNode;\n\n    className?: string;\n}\n\nconst IconWithContext = function (props: IconWithContextProps) {\n    const iconSize = 64;\n    const style = makeStyles((theme) => ({\n        root: {},\n        iconContainer: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n        },\n        icon: {\n            width: iconSize,\n            height: iconSize,\n        },\n        context: {\n            display: \"block\",\n        },\n    }))();\n\n    return (\n        <div className={classnames(props.className, style.root)}>\n            <div className={style.iconContainer}>\n                <div className={style.icon}>{props.icon}</div>\n            </div>\n            <div className={style.context}>{props.context}</div>\n        </div>\n    );\n};\n\nexport default IconWithContext;\n","import React, { Fragment } from \"react\";\n\nimport { makeStyles } from \"@material-ui/core\";\nimport classnames from \"classnames\";\nimport OtpInput from \"react-otp-input\";\n\nimport SuccessIcon from \"../../../components/SuccessIcon\";\nimport TimerIcon from \"../../../components/TimerIcon\";\nimport IconWithContext from \"./IconWithContext\";\nimport { State } from \"./OneTimePasswordMethod\";\n\nexport interface Props {\n    passcode: string;\n    state: State;\n    period: number;\n\n    onChange: (passcode: string) => void;\n}\n\nconst OTPDial = function (props: Props) {\n    const style = useStyles();\n    const dial = (\n        <span className={style.otpInput} id=\"otp-input\">\n            <OtpInput\n                shouldAutoFocus\n                onChange={props.onChange}\n                value={props.passcode}\n                numInputs={6}\n                isDisabled={props.state === State.InProgress || props.state === State.Success}\n                isInputNum\n                hasErrored={props.state === State.Failure}\n                inputStyle={classnames(style.otpDigitInput, props.state === State.Failure ? style.inputError : \"\")}\n            />\n        </span>\n    );\n\n    return <IconWithContext icon={<Icon state={props.state} period={props.period} />} context={dial} />;\n};\n\nexport default OTPDial;\n\nconst useStyles = makeStyles((theme) => ({\n    timeProgress: {},\n    register: {\n        marginTop: theme.spacing(),\n    },\n    otpInput: {\n        display: \"inline-block\",\n        marginTop: theme.spacing(2),\n    },\n    otpDigitInput: {\n        boxSizing: \"content-box\",\n        padding: theme.spacing(),\n        marginLeft: theme.spacing(0.5),\n        marginRight: theme.spacing(0.5),\n        fontSize: \"1rem\",\n        borderRadius: \"5px\",\n        border: \"1px solid rgba(0,0,0,0.3)\",\n    },\n    inputError: {\n        border: \"1px solid rgba(255, 2, 2, 0.95)\",\n    },\n}));\n\ninterface IconProps {\n    state: State;\n    period: number;\n}\n\nfunction Icon(props: IconProps) {\n    return (\n        <Fragment>\n            {props.state !== State.Success ? (\n                <TimerIcon backgroundColor=\"#000\" color=\"#FFFFFF\" width={64} height={64} period={props.period} />\n            ) : null}\n            {props.state === State.Success ? <SuccessIcon /> : null}\n        </Fragment>\n    );\n}\n","import React, { useEffect, useCallback, useState, ReactNode } from \"react\";\n\nimport { Button, makeStyles } from \"@material-ui/core\";\n\nimport FailureIcon from \"../../../components/FailureIcon\";\nimport PushNotificationIcon from \"../../../components/PushNotificationIcon\";\nimport SuccessIcon from \"../../../components/SuccessIcon\";\nimport { useIsMountedRef } from \"../../../hooks/Mounted\";\nimport { useRedirectionURL } from \"../../../hooks/RedirectionURL\";\nimport { completePushNotificationSignIn } from \"../../../services/PushNotification\";\nimport { AuthenticationLevel } from \"../../../services/State\";\nimport MethodContainer, { State as MethodContainerState } from \"./MethodContainer\";\n\nexport enum State {\n    SignInInProgress = 1,\n    Success = 2,\n    Failure = 3,\n}\n\nexport interface Props {\n    id: string;\n    authenticationLevel: AuthenticationLevel;\n\n    onSignInError: (err: Error) => void;\n    onSignInSuccess: (redirectURL: string | undefined) => void;\n}\n\nconst PushNotificationMethod = function (props: Props) {\n    const style = useStyles();\n    const [state, setState] = useState(State.SignInInProgress);\n    const redirectionURL = useRedirectionURL();\n    const mounted = useIsMountedRef();\n\n    const { onSignInSuccess, onSignInError } = props;\n    /* eslint-disable react-hooks/exhaustive-deps */\n    const onSignInErrorCallback = useCallback(onSignInError, []);\n    const onSignInSuccessCallback = useCallback(onSignInSuccess, []);\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const signInFunc = useCallback(async () => {\n        if (props.authenticationLevel === AuthenticationLevel.TwoFactor) {\n            return;\n        }\n\n        try {\n            setState(State.SignInInProgress);\n            const res = await completePushNotificationSignIn(redirectionURL);\n            // If the request was initiated and the user changed 2FA method in the meantime,\n            // the process is interrupted to avoid updating state of unmounted component.\n            if (!mounted.current) return;\n\n            setState(State.Success);\n            setTimeout(() => {\n                if (!mounted.current) return;\n                onSignInSuccessCallback(res ? res.redirect : undefined);\n            }, 1500);\n        } catch (err) {\n            // If the request was initiated and the user changed 2FA method in the meantime,\n            // the process is interrupted to avoid updating state of unmounted component.\n            if (!mounted.current) return;\n\n            console.error(err);\n            onSignInErrorCallback(new Error(\"There was an issue completing sign in process\"));\n            setState(State.Failure);\n        }\n    }, [onSignInErrorCallback, onSignInSuccessCallback, setState, redirectionURL, mounted, props.authenticationLevel]);\n\n    useEffect(() => {\n        signInFunc();\n    }, [signInFunc]);\n\n    // Set successful state if user is already authenticated.\n    useEffect(() => {\n        if (props.authenticationLevel >= AuthenticationLevel.TwoFactor) {\n            setState(State.Success);\n        }\n    }, [props.authenticationLevel, setState]);\n\n    let icon: ReactNode;\n    switch (state) {\n        case State.SignInInProgress:\n            icon = <PushNotificationIcon width={64} height={64} animated />;\n            break;\n        case State.Success:\n            icon = <SuccessIcon />;\n            break;\n        case State.Failure:\n            icon = <FailureIcon />;\n    }\n\n    let methodState = MethodContainerState.METHOD;\n    if (props.authenticationLevel === AuthenticationLevel.TwoFactor) {\n        methodState = MethodContainerState.ALREADY_AUTHENTICATED;\n    }\n\n    return (\n        <MethodContainer\n            id={props.id}\n            title=\"Push Notification\"\n            explanation=\"A notification has been sent to your smartphone\"\n            registered={true}\n            state={methodState}\n        >\n            <div className={style.icon}>{icon}</div>\n            <div className={state !== State.Failure ? \"hidden\" : \"\"}>\n                <Button color=\"secondary\" onClick={signInFunc}>\n                    Retry\n                </Button>\n            </div>\n        </MethodContainer>\n    );\n};\n\nexport default PushNotificationMethod;\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        width: \"64px\",\n        height: \"64px\",\n        display: \"inline-block\",\n    },\n}));\n","import React from \"react\";\n\nimport { faTimesCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport interface Props {}\n\nconst FailureIcon = function (props: Props) {\n    return <FontAwesomeIcon icon={faTimesCircle} size=\"4x\" color=\"red\" className=\"failure-icon\" />;\n};\n\nexport default FailureIcon;\n","import { useRef, useEffect } from \"react\";\n\nexport function useIsMountedRef() {\n    const isMountedRef = useRef(false);\n    useEffect(() => {\n        isMountedRef.current = true;\n        return () => {\n            isMountedRef.current = false;\n        };\n    });\n    return isMountedRef;\n}\n","import { CompletePushNotificationSignInPath } from \"./Api\";\nimport { PostWithOptionalResponse } from \"./Client\";\nimport { SignInResponse } from \"./SignIn\";\n\ninterface CompleteU2FSigninBody {\n    targetURL?: string;\n}\n\nexport function completePushNotificationSignIn(targetURL: string | undefined) {\n    const body: CompleteU2FSigninBody = {};\n    if (targetURL) {\n        body.targetURL = targetURL;\n    }\n    return PostWithOptionalResponse<SignInResponse>(CompletePushNotificationSignInPath, body);\n}\n","import React, { useCallback, useEffect, useState, Fragment } from \"react\";\n\nimport { makeStyles, Button, useTheme } from \"@material-ui/core\";\nimport { CSSProperties } from \"@material-ui/styles\";\nimport u2fApi from \"u2f-api\";\n\nimport FailureIcon from \"../../../components/FailureIcon\";\nimport FingerTouchIcon from \"../../../components/FingerTouchIcon\";\nimport LinearProgressBar from \"../../../components/LinearProgressBar\";\nimport { useIsMountedRef } from \"../../../hooks/Mounted\";\nimport { useRedirectionURL } from \"../../../hooks/RedirectionURL\";\nimport { useTimer } from \"../../../hooks/Timer\";\nimport { initiateU2FSignin, completeU2FSignin } from \"../../../services/SecurityKey\";\nimport { AuthenticationLevel } from \"../../../services/State\";\nimport IconWithContext from \"./IconWithContext\";\nimport MethodContainer, { State as MethodContainerState } from \"./MethodContainer\";\n\nexport enum State {\n    WaitTouch = 1,\n    SigninInProgress = 2,\n    Failure = 3,\n}\n\nexport interface Props {\n    id: string;\n    authenticationLevel: AuthenticationLevel;\n    registered: boolean;\n\n    onRegisterClick: () => void;\n    onSignInError: (err: Error) => void;\n    onSignInSuccess: (redirectURL: string | undefined) => void;\n}\n\nconst SecurityKeyMethod = function (props: Props) {\n    const signInTimeout = 30;\n    const [state, setState] = useState(State.WaitTouch);\n    const style = useStyles();\n    const redirectionURL = useRedirectionURL();\n    const mounted = useIsMountedRef();\n    const [timerPercent, triggerTimer] = useTimer(signInTimeout * 1000 - 500);\n\n    const { onSignInSuccess, onSignInError } = props;\n    /* eslint-disable react-hooks/exhaustive-deps */\n    const onSignInErrorCallback = useCallback(onSignInError, []);\n    const onSignInSuccessCallback = useCallback(onSignInSuccess, []);\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const doInitiateSignIn = useCallback(async () => {\n        // If user is already authenticated, we don't initiate sign in process.\n        if (!props.registered || props.authenticationLevel >= AuthenticationLevel.TwoFactor) {\n            return;\n        }\n\n        try {\n            triggerTimer();\n            setState(State.WaitTouch);\n            const signRequest = await initiateU2FSignin();\n            const signRequests: u2fApi.SignRequest[] = [];\n            for (var i in signRequest.registeredKeys) {\n                const r = signRequest.registeredKeys[i];\n                signRequests.push({\n                    appId: signRequest.appId,\n                    challenge: signRequest.challenge,\n                    keyHandle: r.keyHandle,\n                    version: r.version,\n                });\n            }\n            const signResponse = await u2fApi.sign(signRequests, signInTimeout);\n            // If the request was initiated and the user changed 2FA method in the meantime,\n            // the process is interrupted to avoid updating state of unmounted component.\n            if (!mounted.current) return;\n\n            setState(State.SigninInProgress);\n            const res = await completeU2FSignin(signResponse, redirectionURL);\n            onSignInSuccessCallback(res ? res.redirect : undefined);\n        } catch (err) {\n            // If the request was initiated and the user changed 2FA method in the meantime,\n            // the process is interrupted to avoid updating state of unmounted component.\n            if (!mounted.current) return;\n            console.error(err);\n            onSignInErrorCallback(new Error(\"Failed to initiate security key sign in process\"));\n            setState(State.Failure);\n        }\n    }, [\n        onSignInSuccessCallback,\n        onSignInErrorCallback,\n        redirectionURL,\n        mounted,\n        triggerTimer,\n        props.authenticationLevel,\n        props.registered,\n    ]);\n\n    useEffect(() => {\n        doInitiateSignIn();\n    }, [doInitiateSignIn]);\n\n    let methodState = MethodContainerState.METHOD;\n    if (props.authenticationLevel === AuthenticationLevel.TwoFactor) {\n        methodState = MethodContainerState.ALREADY_AUTHENTICATED;\n    } else if (!props.registered) {\n        methodState = MethodContainerState.NOT_REGISTERED;\n    }\n\n    return (\n        <MethodContainer\n            id={props.id}\n            title=\"Security Key\"\n            explanation=\"Touch the token of your security key\"\n            registered={props.registered}\n            state={methodState}\n            onRegisterClick={props.onRegisterClick}\n        >\n            <div className={style.icon}>\n                <Icon state={state} timer={timerPercent} onRetryClick={doInitiateSignIn} />\n            </div>\n        </MethodContainer>\n    );\n};\n\nexport default SecurityKeyMethod;\n\nconst useStyles = makeStyles((theme) => ({\n    icon: {\n        display: \"inline-block\",\n    },\n}));\n\ninterface IconProps {\n    state: State;\n\n    timer: number;\n    onRetryClick: () => void;\n}\n\nfunction Icon(props: IconProps) {\n    const state = props.state as State;\n    const theme = useTheme();\n\n    const progressBarStyle: CSSProperties = {\n        marginTop: theme.spacing(),\n    };\n\n    const touch = (\n        <IconWithContext\n            icon={<FingerTouchIcon size={64} animated strong />}\n            context={<LinearProgressBar value={props.timer} style={progressBarStyle} height={theme.spacing(2)} />}\n            className={state === State.WaitTouch ? undefined : \"hidden\"}\n        />\n    );\n\n    const failure = (\n        <IconWithContext\n            icon={<FailureIcon />}\n            context={\n                <Button color=\"secondary\" onClick={props.onRetryClick}>\n                    Retry\n                </Button>\n            }\n            className={state === State.Failure ? undefined : \"hidden\"}\n        />\n    );\n\n    return (\n        <Fragment>\n            {touch}\n            {failure}\n        </Fragment>\n    );\n}\n","import React from \"react\";\n\nimport { makeStyles, LinearProgress } from \"@material-ui/core\";\nimport { CSSProperties } from \"@material-ui/styles\";\n\nexport interface Props {\n    value: number;\n    height?: number;\n    className?: string;\n    style?: CSSProperties;\n}\n\nconst LinearProgressBar = function (props: Props) {\n    const style = makeStyles((theme) => ({\n        progressRoot: {\n            height: props.height ? props.height : theme.spacing(),\n        },\n        transition: {\n            transition: \"transform .2s linear\",\n        },\n    }))();\n    return (\n        <LinearProgress\n            style={props.style as React.CSSProperties}\n            variant=\"determinate\"\n            classes={{\n                root: style.progressRoot,\n                bar1Determinate: style.transition,\n            }}\n            value={props.value}\n            className={props.className}\n        />\n    );\n};\n\nexport default LinearProgressBar;\n","import u2fApi from \"u2f-api\";\n\nimport { InitiateU2FSignInPath, CompleteU2FSignInPath } from \"./Api\";\nimport { Post, PostWithOptionalResponse } from \"./Client\";\nimport { SignInResponse } from \"./SignIn\";\n\ninterface InitiateU2FSigninResponse {\n    appId: string;\n    challenge: string;\n    registeredKeys: {\n        appId: string;\n        keyHandle: string;\n        version: string;\n    }[];\n}\n\nexport async function initiateU2FSignin() {\n    return Post<InitiateU2FSigninResponse>(InitiateU2FSignInPath);\n}\n\ninterface CompleteU2FSigninBody {\n    signResponse: u2fApi.SignResponse;\n    targetURL?: string;\n}\n\nexport function completeU2FSignin(signResponse: u2fApi.SignResponse, targetURL: string | undefined) {\n    const body: CompleteU2FSigninBody = { signResponse };\n    if (targetURL) {\n        body.targetURL = targetURL;\n    }\n    return PostWithOptionalResponse<SignInResponse>(CompleteU2FSignInPath, body);\n}\n","import { useState, useCallback, useEffect } from \"react\";\n\nexport function useTimer(timeoutMs: number): [number, () => void, () => void] {\n    const Interval = 100;\n    const [startDate, setStartDate] = useState(undefined as Date | undefined);\n    const [percent, setPercent] = useState(0);\n\n    const trigger = useCallback(() => {\n        setPercent(0);\n        setStartDate(new Date());\n    }, [setStartDate, setPercent]);\n\n    const clear = useCallback(() => {\n        setPercent(0);\n        setStartDate(undefined);\n    }, []);\n\n    useEffect(() => {\n        if (!startDate) {\n            return;\n        }\n\n        const intervalNode = setInterval(() => {\n            const elapsedMs = startDate ? new Date().getTime() - startDate.getTime() : 0;\n            let p = (elapsedMs / timeoutMs) * 100.0;\n            if (p >= 100) {\n                p = 100;\n                setStartDate(undefined);\n            }\n            setPercent(p);\n        }, Interval);\n\n        return () => clearInterval(intervalNode);\n    }, [startDate, setPercent, setStartDate, timeoutMs]);\n\n    return [percent, trigger, clear];\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport { Grid, makeStyles, Button } from \"@material-ui/core\";\nimport { useHistory, Switch, Route, Redirect } from \"react-router\";\nimport u2fApi from \"u2f-api\";\n\nimport { useNotifications } from \"../../../hooks/NotificationsContext\";\nimport LoginLayout from \"../../../layouts/LoginLayout\";\nimport { Configuration } from \"../../../models/Configuration\";\nimport { SecondFactorMethod } from \"../../../models/Methods\";\nimport { UserInfo } from \"../../../models/UserInfo\";\nimport {\n    LogoutRoute as SignOutRoute,\n    SecondFactorTOTPRoute,\n    SecondFactorPushRoute,\n    SecondFactorU2FRoute,\n    SecondFactorRoute,\n} from \"../../../Routes\";\nimport { initiateTOTPRegistrationProcess, initiateU2FRegistrationProcess } from \"../../../services/RegisterDevice\";\nimport { AuthenticationLevel } from \"../../../services/State\";\nimport { setPreferred2FAMethod } from \"../../../services/UserPreferences\";\nimport MethodSelectionDialog from \"./MethodSelectionDialog\";\nimport OneTimePasswordMethod from \"./OneTimePasswordMethod\";\nimport PushNotificationMethod from \"./PushNotificationMethod\";\nimport SecurityKeyMethod from \"./SecurityKeyMethod\";\n\nconst EMAIL_SENT_NOTIFICATION = \"An email has been sent to your address to complete the process.\";\n\nexport interface Props {\n    authenticationLevel: AuthenticationLevel;\n\n    userInfo: UserInfo;\n    configuration: Configuration;\n\n    onMethodChanged: (method: SecondFactorMethod) => void;\n    onAuthenticationSuccess: (redirectURL: string | undefined) => void;\n}\n\nconst SecondFactorForm = function (props: Props) {\n    const style = useStyles();\n    const history = useHistory();\n    const [methodSelectionOpen, setMethodSelectionOpen] = useState(false);\n    const { createInfoNotification, createErrorNotification } = useNotifications();\n    const [registrationInProgress, setRegistrationInProgress] = useState(false);\n    const [u2fSupported, setU2fSupported] = useState(false);\n\n    // Check that U2F is supported.\n    useEffect(() => {\n        u2fApi.ensureSupport().then(\n            () => setU2fSupported(true),\n            () => console.error(\"U2F not supported\"),\n        );\n    }, [setU2fSupported]);\n\n    const initiateRegistration = (initiateRegistrationFunc: () => Promise<void>) => {\n        return async () => {\n            if (registrationInProgress) {\n                return;\n            }\n            setRegistrationInProgress(true);\n            try {\n                await initiateRegistrationFunc();\n                createInfoNotification(EMAIL_SENT_NOTIFICATION);\n            } catch (err) {\n                console.error(err);\n                createErrorNotification(\"There was a problem initiating the registration process\");\n            }\n            setRegistrationInProgress(false);\n        };\n    };\n\n    const handleMethodSelectionClick = () => {\n        setMethodSelectionOpen(true);\n    };\n\n    const handleMethodSelected = async (method: SecondFactorMethod) => {\n        try {\n            await setPreferred2FAMethod(method);\n            setMethodSelectionOpen(false);\n            props.onMethodChanged(method);\n        } catch (err) {\n            console.error(err);\n            createErrorNotification(\"There was an issue updating preferred second factor method\");\n        }\n    };\n\n    const handleLogoutClick = () => {\n        history.push(SignOutRoute);\n    };\n\n    return (\n        <LoginLayout id=\"second-factor-stage\" title={`Hi ${props.userInfo.display_name}`} showBrand>\n            <MethodSelectionDialog\n                open={methodSelectionOpen}\n                methods={props.configuration.available_methods}\n                u2fSupported={u2fSupported}\n                onClose={() => setMethodSelectionOpen(false)}\n                onClick={handleMethodSelected}\n            />\n            <Grid container>\n                <Grid item xs={12}>\n                    <Button color=\"secondary\" onClick={handleLogoutClick} id=\"logout-button\">\n                        Logout\n                    </Button>\n                    {\" | \"}\n                    <Button color=\"secondary\" onClick={handleMethodSelectionClick} id=\"methods-button\">\n                        Methods\n                    </Button>\n                </Grid>\n                <Grid item xs={12} className={style.methodContainer}>\n                    <Switch>\n                        <Route path={SecondFactorTOTPRoute} exact>\n                            <OneTimePasswordMethod\n                                id=\"one-time-password-method\"\n                                authenticationLevel={props.authenticationLevel}\n                                // Whether the user has a TOTP secret registered already\n                                registered={props.userInfo.has_totp}\n                                totp_period={props.configuration.totp_period}\n                                onRegisterClick={initiateRegistration(initiateTOTPRegistrationProcess)}\n                                onSignInError={(err) => createErrorNotification(err.message)}\n                                onSignInSuccess={props.onAuthenticationSuccess}\n                            />\n                        </Route>\n                        <Route path={SecondFactorU2FRoute} exact>\n                            <SecurityKeyMethod\n                                id=\"security-key-method\"\n                                authenticationLevel={props.authenticationLevel}\n                                // Whether the user has a U2F device registered already\n                                registered={props.userInfo.has_u2f}\n                                onRegisterClick={initiateRegistration(initiateU2FRegistrationProcess)}\n                                onSignInError={(err) => createErrorNotification(err.message)}\n                                onSignInSuccess={props.onAuthenticationSuccess}\n                            />\n                        </Route>\n                        <Route path={SecondFactorPushRoute} exact>\n                            <PushNotificationMethod\n                                id=\"push-notification-method\"\n                                authenticationLevel={props.authenticationLevel}\n                                onSignInError={(err) => createErrorNotification(err.message)}\n                                onSignInSuccess={props.onAuthenticationSuccess}\n                            />\n                        </Route>\n                        <Route path={SecondFactorRoute}>\n                            <Redirect to={SecondFactorTOTPRoute} />\n                        </Route>\n                    </Switch>\n                </Grid>\n            </Grid>\n        </LoginLayout>\n    );\n};\n\nexport default SecondFactorForm;\n\nconst useStyles = makeStyles((theme) => ({\n    methodContainer: {\n        border: \"1px solid #d6d6d6\",\n        borderRadius: \"10px\",\n        padding: theme.spacing(4),\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n","import React, { useEffect, Fragment, ReactNode, useState, useCallback } from \"react\";\n\nimport { Switch, Route, Redirect, useHistory, useLocation } from \"react-router\";\n\nimport { useConfiguration } from \"../../hooks/Configuration\";\nimport { useNotifications } from \"../../hooks/NotificationsContext\";\nimport { useRedirectionURL } from \"../../hooks/RedirectionURL\";\nimport { useRedirector } from \"../../hooks/Redirector\";\nimport { useRequestMethod } from \"../../hooks/RequestMethod\";\nimport { useAutheliaState } from \"../../hooks/State\";\nimport { useUserPreferences as userUserInfo } from \"../../hooks/UserInfo\";\nimport { SecondFactorMethod } from \"../../models/Methods\";\nimport {\n    FirstFactorRoute,\n    SecondFactorRoute,\n    SecondFactorTOTPRoute,\n    SecondFactorPushRoute,\n    SecondFactorU2FRoute,\n    AuthenticatedRoute,\n} from \"../../Routes\";\nimport { AuthenticationLevel } from \"../../services/State\";\nimport LoadingPage from \"../LoadingPage/LoadingPage\";\nimport AuthenticatedView from \"./AuthenticatedView/AuthenticatedView\";\nimport FirstFactorForm from \"./FirstFactor/FirstFactorForm\";\nimport SecondFactorForm from \"./SecondFactor/SecondFactorForm\";\n\nexport interface Props {\n    rememberMe: boolean;\n    resetPassword: boolean;\n}\n\nconst LoginPortal = function (props: Props) {\n    const history = useHistory();\n    const location = useLocation();\n    const redirectionURL = useRedirectionURL();\n    const requestMethod = useRequestMethod();\n    const { createErrorNotification } = useNotifications();\n    const [firstFactorDisabled, setFirstFactorDisabled] = useState(true);\n    const redirector = useRedirector();\n\n    const [state, fetchState, , fetchStateError] = useAutheliaState();\n    const [userInfo, fetchUserInfo, , fetchUserInfoError] = userUserInfo();\n    const [configuration, fetchConfiguration, , fetchConfigurationError] = useConfiguration();\n\n    const redirect = useCallback((url: string) => history.push(url), [history]);\n\n    // Fetch the state when portal is mounted.\n    useEffect(() => {\n        fetchState();\n    }, [fetchState]);\n\n    // Fetch preferences and configuration when user is authenticated.\n    useEffect(() => {\n        if (state && state.authentication_level >= AuthenticationLevel.OneFactor) {\n            fetchUserInfo();\n            fetchConfiguration();\n        }\n    }, [state, fetchUserInfo, fetchConfiguration]);\n\n    // Enable first factor when user is unauthenticated.\n    useEffect(() => {\n        if (state && state.authentication_level > AuthenticationLevel.Unauthenticated) {\n            setFirstFactorDisabled(true);\n        }\n    }, [state, setFirstFactorDisabled]);\n\n    // Display an error when state fetching fails\n    useEffect(() => {\n        if (fetchStateError) {\n            createErrorNotification(\"There was an issue fetching the current user state\");\n        }\n    }, [fetchStateError, createErrorNotification]);\n\n    // Display an error when configuration fetching fails\n    useEffect(() => {\n        if (fetchConfigurationError) {\n            createErrorNotification(\"There was an issue retrieving global configuration\");\n        }\n    }, [fetchConfigurationError, createErrorNotification]);\n\n    // Display an error when preferences fetching fails\n    useEffect(() => {\n        if (fetchUserInfoError) {\n            createErrorNotification(\"There was an issue retrieving user preferences\");\n        }\n    }, [fetchUserInfoError, createErrorNotification]);\n\n    // Redirect to the correct stage if not enough authenticated\n    useEffect(() => {\n        if (state) {\n            const redirectionSuffix = redirectionURL\n                ? `?rd=${encodeURIComponent(redirectionURL)}${requestMethod ? `&rm=${requestMethod}` : \"\"}`\n                : \"\";\n\n            if (state.authentication_level === AuthenticationLevel.Unauthenticated) {\n                setFirstFactorDisabled(false);\n                redirect(`${FirstFactorRoute}${redirectionSuffix}`);\n            } else if (state.authentication_level >= AuthenticationLevel.OneFactor && userInfo && configuration) {\n                if (!configuration.second_factor_enabled) {\n                    redirect(AuthenticatedRoute);\n                } else {\n                    if (userInfo.method === SecondFactorMethod.U2F) {\n                        redirect(`${SecondFactorU2FRoute}${redirectionSuffix}`);\n                    } else if (userInfo.method === SecondFactorMethod.MobilePush) {\n                        redirect(`${SecondFactorPushRoute}${redirectionSuffix}`);\n                    } else {\n                        redirect(`${SecondFactorTOTPRoute}${redirectionSuffix}`);\n                    }\n                }\n            }\n        }\n    }, [state, redirectionURL, requestMethod, redirect, userInfo, setFirstFactorDisabled, configuration]);\n\n    const handleAuthSuccess = async (redirectionURL: string | undefined) => {\n        if (redirectionURL) {\n            // Do an external redirection pushed by the server.\n            redirector(redirectionURL);\n        } else {\n            // Refresh state\n            fetchState();\n        }\n    };\n\n    const firstFactorReady =\n        state !== undefined &&\n        state.authentication_level === AuthenticationLevel.Unauthenticated &&\n        location.pathname === FirstFactorRoute;\n\n    return (\n        <Switch>\n            <Route path={FirstFactorRoute} exact>\n                <ComponentOrLoading ready={firstFactorReady}>\n                    <FirstFactorForm\n                        disabled={firstFactorDisabled}\n                        rememberMe={props.rememberMe}\n                        resetPassword={props.resetPassword}\n                        onAuthenticationStart={() => setFirstFactorDisabled(true)}\n                        onAuthenticationFailure={() => setFirstFactorDisabled(false)}\n                        onAuthenticationSuccess={handleAuthSuccess}\n                    />\n                </ComponentOrLoading>\n            </Route>\n            <Route path={SecondFactorRoute}>\n                {state && userInfo && configuration ? (\n                    <SecondFactorForm\n                        authenticationLevel={state.authentication_level}\n                        userInfo={userInfo}\n                        configuration={configuration}\n                        onMethodChanged={() => fetchUserInfo()}\n                        onAuthenticationSuccess={handleAuthSuccess}\n                    />\n                ) : null}\n            </Route>\n            <Route path={AuthenticatedRoute} exact>\n                {userInfo ? <AuthenticatedView name={userInfo.display_name} /> : null}\n            </Route>\n            {/* By default we route to first factor page */}\n            <Route path=\"/\">\n                <Redirect to={FirstFactorRoute} />\n            </Route>\n        </Switch>\n    );\n};\n\nexport default LoginPortal;\n\ninterface ComponentOrLoadingProps {\n    ready: boolean;\n\n    children: ReactNode;\n}\n\nfunction ComponentOrLoading(props: ComponentOrLoadingProps) {\n    return (\n        <Fragment>\n            <div className={props.ready ? \"hidden\" : \"\"}>\n                <LoadingPage />\n            </div>\n            {props.ready ? props.children : null}\n        </Fragment>\n    );\n}\n","import { getState } from \"../services/State\";\nimport { useRemoteCall } from \"./RemoteCall\";\n\nexport function useAutheliaState() {\n    return useRemoteCall(getState, []);\n}\n","import { getUserPreferences } from \"../services/UserPreferences\";\nimport { useRemoteCall } from \"./RemoteCall\";\n\nexport function useUserPreferences() {\n    return useRemoteCall(getUserPreferences, []);\n}\n","import { getConfiguration } from \"../services/Configuration\";\nimport { useRemoteCall } from \"./RemoteCall\";\n\nexport function useConfiguration() {\n    return useRemoteCall(getConfiguration, []);\n}\n","import { LogoutPath } from \"./Api\";\nimport { PostWithOptionalResponse } from \"./Client\";\n\nexport type SignOutResponse = { safeTargetURL: boolean } | undefined;\n\nexport type SignOutBody = {\n    targetURL?: string;\n};\n\nexport async function signOut(targetURL: string | undefined): Promise<SignOutResponse> {\n    const body: SignOutBody = {};\n    if (targetURL) {\n        body.targetURL = targetURL;\n    }\n\n    return PostWithOptionalResponse<SignOutResponse>(LogoutPath, body);\n}\n","import React, { useEffect, useCallback, useState } from \"react\";\n\nimport { Typography, makeStyles } from \"@material-ui/core\";\nimport { Redirect } from \"react-router\";\n\nimport { useIsMountedRef } from \"../../../hooks/Mounted\";\nimport { useNotifications } from \"../../../hooks/NotificationsContext\";\nimport { useRedirectionURL } from \"../../../hooks/RedirectionURL\";\nimport { useRedirector } from \"../../../hooks/Redirector\";\nimport LoginLayout from \"../../../layouts/LoginLayout\";\nimport { FirstFactorRoute } from \"../../../Routes\";\nimport { signOut } from \"../../../services/SignOut\";\n\nexport interface Props {}\n\nconst SignOut = function (props: Props) {\n    const mounted = useIsMountedRef();\n    const style = useStyles();\n    const { createErrorNotification } = useNotifications();\n    const redirectionURL = useRedirectionURL();\n    const redirector = useRedirector();\n    const [timedOut, setTimedOut] = useState(false);\n    const [safeRedirect, setSafeRedirect] = useState(false);\n\n    const doSignOut = useCallback(async () => {\n        try {\n            const res = await signOut(redirectionURL);\n            if (res !== undefined && res.safeTargetURL) {\n                setSafeRedirect(true);\n            }\n            setTimeout(() => {\n                if (!mounted) {\n                    return;\n                }\n                setTimedOut(true);\n            }, 2000);\n        } catch (err) {\n            console.error(err);\n            createErrorNotification(\"There was an issue signing out\");\n        }\n    }, [createErrorNotification, redirectionURL, setSafeRedirect, setTimedOut, mounted]);\n\n    useEffect(() => {\n        doSignOut();\n    }, [doSignOut]);\n\n    if (timedOut) {\n        if (redirectionURL && safeRedirect) {\n            redirector(redirectionURL);\n        } else {\n            return <Redirect to={FirstFactorRoute} />;\n        }\n    }\n\n    return (\n        <LoginLayout title=\"Sign out\">\n            <Typography className={style.typo}>You're being signed out and redirected...</Typography>\n        </LoginLayout>\n    );\n};\n\nexport default SignOut;\n\nconst useStyles = makeStyles((theme) => ({\n    typo: {\n        padding: theme.spacing(),\n    },\n}));\n","import { InitiateResetPasswordPath, CompleteResetPasswordPath, ResetPasswordPath } from \"./Api\";\nimport { PostWithOptionalResponse } from \"./Client\";\n\nexport async function initiateResetPasswordProcess(username: string) {\n    return PostWithOptionalResponse(InitiateResetPasswordPath, { username });\n}\n\nexport async function completeResetPasswordProcess(token: string) {\n    return PostWithOptionalResponse(CompleteResetPasswordPath, { token });\n}\n\nexport async function resetPassword(newPassword: string) {\n    return PostWithOptionalResponse(ResetPasswordPath, { password: newPassword });\n}\n","import React, { useState } from \"react\";\n\nimport { Grid, Button, makeStyles } from \"@material-ui/core\";\nimport { useHistory } from \"react-router\";\n\nimport FixedTextField from \"../../components/FixedTextField\";\nimport { useNotifications } from \"../../hooks/NotificationsContext\";\nimport LoginLayout from \"../../layouts/LoginLayout\";\nimport { FirstFactorRoute } from \"../../Routes\";\nimport { initiateResetPasswordProcess } from \"../../services/ResetPassword\";\n\nconst ResetPasswordStep1 = function () {\n    const style = useStyles();\n    const [username, setUsername] = useState(\"\");\n    const [error, setError] = useState(false);\n    const { createInfoNotification, createErrorNotification } = useNotifications();\n    const history = useHistory();\n\n    const doInitiateResetPasswordProcess = async () => {\n        if (username === \"\") {\n            setError(true);\n            return;\n        }\n\n        try {\n            await initiateResetPasswordProcess(username);\n            createInfoNotification(\"An email has been sent to your address to complete the process.\");\n        } catch (err) {\n            createErrorNotification(\"There was an issue initiating the password reset process.\");\n        }\n    };\n\n    const handleResetClick = () => {\n        doInitiateResetPasswordProcess();\n    };\n\n    const handleCancelClick = () => {\n        history.push(FirstFactorRoute);\n    };\n\n    return (\n        <LoginLayout title=\"Reset password\" id=\"reset-password-step1-stage\">\n            <Grid container className={style.root} spacing={2}>\n                <Grid item xs={12}>\n                    <FixedTextField\n                        id=\"username-textfield\"\n                        label=\"Username\"\n                        variant=\"outlined\"\n                        fullWidth\n                        error={error}\n                        value={username}\n                        onChange={(e) => setUsername(e.target.value)}\n                        onKeyPress={(ev) => {\n                            if (ev.key === \"Enter\") {\n                                doInitiateResetPasswordProcess();\n                                ev.preventDefault();\n                            }\n                        }}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <Button id=\"reset-button\" variant=\"contained\" color=\"primary\" fullWidth onClick={handleResetClick}>\n                        Reset\n                    </Button>\n                </Grid>\n                <Grid item xs={6}>\n                    <Button\n                        id=\"cancel-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        fullWidth\n                        onClick={handleCancelClick}\n                    >\n                        Cancel\n                    </Button>\n                </Grid>\n            </Grid>\n        </LoginLayout>\n    );\n};\n\nexport default ResetPasswordStep1;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n}));\n","import React, { useState, useCallback, useEffect } from \"react\";\n\nimport { Grid, Button, makeStyles } from \"@material-ui/core\";\nimport classnames from \"classnames\";\nimport { useHistory, useLocation } from \"react-router\";\n\nimport FixedTextField from \"../../components/FixedTextField\";\nimport { useNotifications } from \"../../hooks/NotificationsContext\";\nimport LoginLayout from \"../../layouts/LoginLayout\";\nimport { FirstFactorRoute } from \"../../Routes\";\nimport { completeResetPasswordProcess, resetPassword } from \"../../services/ResetPassword\";\nimport { extractIdentityToken } from \"../../utils/IdentityToken\";\n\nconst ResetPasswordStep2 = function () {\n    const style = useStyles();\n    const location = useLocation();\n    const [formDisabled, setFormDisabled] = useState(true);\n    const [password1, setPassword1] = useState(\"\");\n    const [password2, setPassword2] = useState(\"\");\n    const [errorPassword1, setErrorPassword1] = useState(false);\n    const [errorPassword2, setErrorPassword2] = useState(false);\n    const { createSuccessNotification, createErrorNotification } = useNotifications();\n    const history = useHistory();\n    // Get the token from the query param to give it back to the API when requesting\n    // the secret for OTP.\n    const processToken = extractIdentityToken(location.search);\n\n    const completeProcess = useCallback(async () => {\n        if (!processToken) {\n            setFormDisabled(true);\n            createErrorNotification(\"No verification token provided\");\n            return;\n        }\n\n        try {\n            setFormDisabled(true);\n            await completeResetPasswordProcess(processToken);\n            setFormDisabled(false);\n        } catch (err) {\n            console.error(err);\n            createErrorNotification(\n                \"There was an issue completing the process. The verification token might have expired.\",\n            );\n            setFormDisabled(true);\n        }\n    }, [processToken, createErrorNotification]);\n\n    useEffect(() => {\n        completeProcess();\n    }, [completeProcess]);\n\n    const doResetPassword = async () => {\n        if (password1 === \"\" || password2 === \"\") {\n            if (password1 === \"\") {\n                setErrorPassword1(true);\n            }\n            if (password2 === \"\") {\n                setErrorPassword2(true);\n            }\n            return;\n        }\n        if (password1 !== password2) {\n            setErrorPassword1(true);\n            setErrorPassword2(true);\n            createErrorNotification(\"Passwords do not match.\");\n            return;\n        }\n\n        try {\n            await resetPassword(password1);\n            createSuccessNotification(\"Password has been reset.\");\n            setTimeout(() => history.push(FirstFactorRoute), 1500);\n            setFormDisabled(true);\n        } catch (err) {\n            console.error(err);\n            if (err.message.includes(\"0000052D.\")) {\n                createErrorNotification(\"Your supplied password does not meet the password policy requirements.\");\n            } else {\n                createErrorNotification(\"There was an issue resetting the password.\");\n            }\n        }\n    };\n\n    const handleResetClick = () => doResetPassword();\n\n    const handleCancelClick = () => history.push(FirstFactorRoute);\n\n    return (\n        <LoginLayout title=\"Enter new password\" id=\"reset-password-step2-stage\">\n            <Grid container className={style.root} spacing={2}>\n                <Grid item xs={12}>\n                    <FixedTextField\n                        id=\"password1-textfield\"\n                        label=\"New password\"\n                        variant=\"outlined\"\n                        type=\"password\"\n                        value={password1}\n                        disabled={formDisabled}\n                        onChange={(e) => setPassword1(e.target.value)}\n                        error={errorPassword1}\n                        className={classnames(style.fullWidth)}\n                    />\n                </Grid>\n                <Grid item xs={12}>\n                    <FixedTextField\n                        id=\"password2-textfield\"\n                        label=\"Repeat new password\"\n                        variant=\"outlined\"\n                        type=\"password\"\n                        disabled={formDisabled}\n                        value={password2}\n                        onChange={(e) => setPassword2(e.target.value)}\n                        error={errorPassword2}\n                        onKeyPress={(ev) => {\n                            if (ev.key === \"Enter\") {\n                                doResetPassword();\n                                ev.preventDefault();\n                            }\n                        }}\n                        className={classnames(style.fullWidth)}\n                    />\n                </Grid>\n                <Grid item xs={6}>\n                    <Button\n                        id=\"reset-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        name=\"password1\"\n                        disabled={formDisabled}\n                        onClick={handleResetClick}\n                        className={style.fullWidth}\n                    >\n                        Reset\n                    </Button>\n                </Grid>\n                <Grid item xs={6}>\n                    <Button\n                        id=\"cancel-button\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        name=\"password2\"\n                        onClick={handleCancelClick}\n                        className={style.fullWidth}\n                    >\n                        Cancel\n                    </Button>\n                </Grid>\n            </Grid>\n        </LoginLayout>\n    );\n};\n\nexport default ResetPasswordStep2;\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n    },\n    fullWidth: {\n        width: \"100%\",\n    },\n}));\n","import React, { useState } from \"react\";\n\nimport { config as faConfig } from \"@fortawesome/fontawesome-svg-core\";\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\n\nimport NotificationBar from \"./components/NotificationBar\";\nimport NotificationsContext from \"./hooks/NotificationsContext\";\nimport { Notification } from \"./models/Notifications\";\nimport {\n    FirstFactorRoute,\n    ResetPasswordStep2Route,\n    ResetPasswordStep1Route,\n    RegisterSecurityKeyRoute,\n    RegisterOneTimePasswordRoute,\n    LogoutRoute,\n    ConsentRoute,\n} from \"./Routes\";\nimport * as themes from \"./themes\";\nimport { getBasePath } from \"./utils/BasePath\";\nimport { getRememberMe, getResetPassword, getTheme } from \"./utils/Configuration\";\nimport RegisterOneTimePassword from \"./views/DeviceRegistration/RegisterOneTimePassword\";\nimport RegisterSecurityKey from \"./views/DeviceRegistration/RegisterSecurityKey\";\nimport ConsentView from \"./views/LoginPortal/ConsentView/ConsentView\";\nimport LoginPortal from \"./views/LoginPortal/LoginPortal\";\nimport SignOut from \"./views/LoginPortal/SignOut/SignOut\";\nimport ResetPasswordStep1 from \"./views/ResetPassword/ResetPasswordStep1\";\nimport ResetPasswordStep2 from \"./views/ResetPassword/ResetPasswordStep2\";\n\nimport \"@fortawesome/fontawesome-svg-core/styles.css\";\n\nfaConfig.autoAddCss = false;\n\nfunction Theme() {\n    switch (getTheme()) {\n        case \"dark\":\n            return themes.Dark;\n        case \"grey\":\n            return themes.Grey;\n        default:\n            return themes.Light;\n    }\n}\n\nconst App: React.FC = () => {\n    const [notification, setNotification] = useState(null as Notification | null);\n\n    return (\n        <ThemeProvider theme={Theme()}>\n            <CssBaseline />\n            <NotificationsContext.Provider value={{ notification, setNotification }}>\n                <Router basename={getBasePath()}>\n                    <NotificationBar onClose={() => setNotification(null)} />\n                    <Switch>\n                        <Route path={ResetPasswordStep1Route} exact>\n                            <ResetPasswordStep1 />\n                        </Route>\n                        <Route path={ResetPasswordStep2Route} exact>\n                            <ResetPasswordStep2 />\n                        </Route>\n                        <Route path={RegisterSecurityKeyRoute} exact>\n                            <RegisterSecurityKey />\n                        </Route>\n                        <Route path={RegisterOneTimePasswordRoute} exact>\n                            <RegisterOneTimePassword />\n                        </Route>\n                        <Route path={LogoutRoute} exact>\n                            <SignOut />\n                        </Route>\n                        <Route path={ConsentRoute} exact>\n                            <ConsentView />\n                        </Route>\n                        <Route path={FirstFactorRoute}>\n                            <LoginPortal rememberMe={getRememberMe()} resetPassword={getResetPassword()} />\n                        </Route>\n                        <Route path=\"/\">\n                            <Redirect to={FirstFactorRoute} />\n                        </Route>\n                    </Switch>\n                </Router>\n            </NotificationsContext.Provider>\n        </ThemeProvider>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import \"./utils/AssetPath\";\n\nimport React from \"react\";\n\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hand\":\"FingerTouchIcon_hand__fZM01\",\"strong\":\"FingerTouchIcon_strong__XLkjn\",\"shaking\":\"FingerTouchIcon_shaking__2J7jA\"};"],"sourceRoot":""}